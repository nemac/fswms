#! /usr/bin/python

import sys, re, os

sys.path.append("../var")
try:
    from Config import *
    from datetime import timedelta
    from datetime import datetime    
except:
    print "Cannot find local settings file 'Config.py'.  You need to create a Config.py file that contains"
    print "settings appropriate for this copy of the FSWMS project.  You can use the file 'Config.tpl.py'"
    print "as a starting point --- make a copy of that file called 'Config.py', and edit appropriately."
    exit(-1)

from LegendConfig import *


class Template:
    def __init__(self, file=None, **args):
        if file is None and 'string' in args:
            self.contents = args['string']
        else:
            f = open(file, "r")
            self.contents = ""
            for line in f:
                self.contents = self.contents + line
            f.close
    def render(self, dict):
        return self.contents % dict

# jdm 5/13/13: relevant mask for tacs nasa products
# these should be read out of an external config file but I have hardcoded for now
ewsMask = "MaskForDeciduousForest,MaskForConiferForest,MaskForMixedForest,MaskForEarlyNon-Forest"
        
wmsLayerTemplate = Template(string="""
        <wmsLayer
          %(SELECTED)slid="%(LAYER_LID)s"
          visible="%(LAYER_VISIBLE)s"
          url="%(SERVER_URL)s/ews?TRANSPARENT=true"
          srs="EPSG:3785"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="true"
          legend="%(LEGEND)s"
          mask="%(MASK)s"/>	
""")

nrtWMSLayerTemplate = Template(string="""
        <wmsLayer
          lid="%(LAYER_LID)s"
          visible="false"
          url="%(SERVER_URL)s/%(WRAP_NAME)s?TRANSPARENT=true"
          srs="EPSG:3785"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="true"
          legend="%(LEGEND)s"
          mask="%(MASK)s"/>	
""")
#drought monitor template    
drtWMSLayerTemplate = Template(string="""
        <wmsLayer
          lid="%(LAYER_LID)s"
          visible="false"
          url="%(DRT_URL)s" 
          srs="EPSG:900913"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="false"
          legend="%(SERVER_URL)s/cmapicons/drought-monitor.png"/>""")    
          

def next_alpha(s):
    strip_zs = s.rstrip('z')
    if strip_zs:
        return (strip_zs[:-1] + chr(ord(strip_zs[-1]) + 1) + 'a' * (len(s) - len(strip_zs)))
    else:
        return 'a' * (len(s) + 1)

def getLID(layerName, csvName):
    #print layerName
    #print csvName
    lids_list = []
    lyrs_list = []
    last_lid = ""
    f = open(csvName, "r");
    for line in f:
        sp = line.split(',')
        lyrs_list.append(sp[0])
        lids_list.append(sp[1])
    f.close();
    sorted_array = sorted(lids_list)
    sorted_array.reverse()
    #print "highest lid is %s" % sorted_array[0]
    highest_lid = sorted_array[0]
    nlid = next_alpha(highest_lid.lower().rstrip()) #rstrip removes any newline chars or white space
    if any(layerName.rstrip() in s for s in lyrs_list):#check to see if lid is already in list
        i = 0
        for item in lyrs_list:
            if lyrs_list[i]==layerName:
                nlid = lids_list[i]
            i = i + 1
    else: #this is new one, iterate and add to file
        #print "new one " + layerName
        f.close()
        f = open(csvName, "a");
        f.write(layerName+ "," + nlid.upper() + "\n")
        f.close()
    #print "layer: " + layerName + " lid: " + nlid.upper()
    return nlid.rstrip().upper()

def getDRTLayers():
    #automating the drought monitor layers
    #note: leave a blank space at the botton of the csv to start
    drtList  = []
    #startDate = "100105" #year-month-day
    startDate = "000104" #year-month-day
    today = datetime.today();
    #print today.strftime('%y%m%d');
    #Loop through dates starting w/ startDate
    #until within 8 days of current date
    loopDate = datetime.strptime(startDate,'%y%m%d');
    #print "Starting loopDate: " + loopDate.strftime('%y%m%d');
    #print "today - timedelta(days=7): " + (today - timedelta(days=7)).strftime('%y%m%d');
    while (today > loopDate):
       #print 'The loopDate is ' + loopDate.strftime('%y%m%d')
       lid = getLID("usdm"+loopDate.strftime('%y%m%d'), DRT_LIDFILE_PATH)
       drtURL = "http://torka.unl.edu:8080/cgi-bin/mapserv.exe?map=/ms4w/apps/dm/service/usdm"+loopDate.strftime('%y%m%d')+"_wms.map&amp;TRANSPARENT=true"
       drtList.append({ 'LAYER_LID'       : lid,
                        'LAYER_NAME'      : "usdm"+loopDate.strftime('%y%m%d'),
                        'LAYER_TITLE'     : loopDate.strftime('%m/%d/%Y'),
                        'SERVER_URL'      : SERVER_URL,
                        'DRT_URL'         : drtURL
       })
       loopDate = loopDate + timedelta(days=7)
    #print 'Final loopDate was: ' + loopDate.strftime('%y%m%d')
    drtList.reverse() #reverse the list so that newest dates are on top always
    layers = ""
    for drtDict in drtList:
        layers = layers + drtWMSLayerTemplate.render(drtDict)    
    return layers                 
          
def getNRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=False):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            layerTitle = tif
            lid = getLID(layerName, NRT_LIDFILE_PATH)
            if legendBool:
                legend = getLegend(layerName)
            else:
		legend = ""
            if groupName == "EFETAC-NASA_TC":
                layerTitle = "True Color " + layerName[-11:]
            else:
                layerTitle = layerName[-8:]
            if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                if maskBool:
                    tifList.append({ 'LAYER_LID'    : lid,
                                     'WRAP_NAME'    : wrapName,
                                     'LAYER_NAME'   : layerName,
                                     'LAYER_TITLE'  : layerTitle,
                                     'SERVER_URL'   : SERVER_URL,
                                     'LEGEND'       : SERVER_URL+"/"+legend,
                                     'MASK'         : ewsMask
                                     })
                else:  #no mask necessary for this one                      
                    tifList.append({ 'LAYER_LID'    : lid,
                                     'WRAP_NAME'    : wrapName,
                                     'LAYER_NAME'   : layerName,
                                     'LAYER_TITLE'  : layerTitle,
                                     'SERVER_URL'   : SERVER_URL,
                                     'LEGEND'       : SERVER_URL+"/"+legend,
                                     'MASK'         : ''
                                     })
            layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers
          
###
### Beginning of run-time code *******************************************************************************
###

if not os.path.exists(NRT_LIDFILE_PATH):
    print "Can't read required NRT LID file '%s'.  Aborting." % (NRT_LIDFILE_PATH)
    exit(-1)

if not os.path.exists(DRT_LIDFILE_PATH):
    print "Can't read required DRT LID file '%s'.  Aborting." % (DRT_LIDFILE_PATH)
    exit(-1)
        
###
### Populate 'layerTitles' dict by reading contents from "layerTitles.txt" file:
###
try:
    f = open("layerTitles.txt", "r")
    layerTitles = {}
    for line in f:
        fields = re.split(r':', line.strip())
        layerTitles[fields[0]] = re.sub(r'^.*/([^/]+)$', '\\1', fields[1])
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("january", "jan")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("febuary", "feb")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("march", "mar")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("april", "apr")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("may", "may")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("june", "jun")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("july", "jul")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("august", "aug")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("september", "sep")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("october", "oct")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("november", "nov")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("december", "dec")
    f.close()
except:
    print "Can't read file layerTitles.txt; you must run 'makemap' before running this script!"
    sys.exit(-1)

tacsModisChangeDetectionProductLayers = ""
for subgroup in [
    { 'label' : '   Change from 1-Year Baseline (recent disturbances)',
      'layers' : [
            { 'name' : 'EFETAC-NASA_1YrBaseline_current',       'lid' : 'AD',  'visible' : 'true' },
            { 'name' : 'EFETAC-NASA_1YrBaseline_previous1',     'lid' : 'AE',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_1YrBaseline_previous2',     'lid' : 'AF',  'visible' : 'false' } ] },
    { 'label' : '   Change from All-Year Baseline (all disturbances)',
      'layers' : [
            { 'name' : 'EFETAC-NASA_current',                   'lid' : 'AA',  'visible' : 'false'  },
            { 'name' : 'EFETAC-NASA_previous1',                 'lid' : 'AB',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_previous2',                 'lid' : 'AC',  'visible' : 'false' } ] },
    { 'label' : '   Change from 3-Year Baseline (&lt;3-Yr old disturbances)',
      'layers' : [
            { 'name' : 'EFETAC-NASA_3YrBaseline_current',       'lid' : 'AG',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_3YrBaseline_previous1',     'lid' : 'AH',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_3YrBaseline_previous2',     'lid' : 'AI',  'visible' : 'false' } ] },
    { 'label' : '   Early Detect (ALC) Change from previous year',
      'layers' : [
            { 'name' : 'EFETAC-NASA_ALC1YR_current',       'lid' : 'ALCAA',  'visible' : 'false' },
			{ 'name' : 'EFETAC-NASA_ALC1YR_previous1',     'lid' : 'ALCAB',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_ALC1YR_previous2',     'lid' : 'ALCAC',  'visible' : 'false' } ] },		
	{ 'label' : '   Seasonally-Adjusted Change from All-Year pheno-cluster max (MUC)',
      'layers' : [
            { 'name' : 'EFETAC-NASA_MUCAllYear_current',       'lid' : 'MUCAA',  'visible' : 'false' },
			{ 'name' : 'EFETAC-NASA_MUCAllYear_previous1',     'lid' : 'MUCAB',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_MUCAllYear_previous2',     'lid' : 'MUCAC',  'visible' : 'false' } ] },			
	{ 'label' : '   Seasonally-Adjusted Change from All-Year mean of maximums (MMAX)',
      'layers' : [
            { 'name' : 'EFETAC-NASA_MoMAllYear_current',       'lid' : 'MoMAA',  'visible' : 'false' },
			{ 'name' : 'EFETAC-NASA_MoMAllYear_previous1',     'lid' : 'MoMAB',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_MoMAllYear_previous2',     'lid' : 'MoMAC',  'visible' : 'false' } ] }			
    ]:
    tacsModisChangeDetectionProductLayers = ( tacsModisChangeDetectionProductLayers +
        '      <wmsSubgroup label="' + subgroup['label'] + '">\n' )
    for layer in subgroup['layers']:
        tacsModisChangeDetectionProductLayers = tacsModisChangeDetectionProductLayers + wmsLayerTemplate.render({
                'SELECTED'      : ("selected=\"true\"\n          " if (layer['name']=='EFETAC-NASA_1YrBaseline_current') else ""),
                'SERVER_URL'    : SERVER_URL,
                'LAYER_LID'     : layer['lid'],
                'LAYER_NAME'    : layer['name'],
                'LEGEND'        : SERVER_URL+'/'+getLegend(layer['name']),
                'LAYER_VISIBLE' : layer['visible'],
                'LAYER_TITLE'   : layerTitles[layer['name']],
                'MASK'   : ewsMask
                })
    tacsModisChangeDetectionProductLayers = tacsModisChangeDetectionProductLayers + "      </wmsSubgroup>\n"

rsacModisChangeDetectionProductLayers = ""

for subgroup in [    
    { 'label' : '   Change from 3-Year Baseline',
      'layers' : [
            { 'name' : 'RSAC-FHTET_current',                    'lid' : 'AM',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_previous1',                  'lid' : 'AN',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_previous2',                  'lid' : 'AP',  'visible' : 'false' } ] },
			{ 'label' : '   Change from 5-Year Baseline',
      'layers' : [
            { 'name' : 'RSAC-FHTET_5YrBaseline_current',        'lid' : 'AQ',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_5YrBaseline_previous1',      'lid' : 'AR',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_5YrBaseline_previous2',      'lid' : 'AS',  'visible' : 'false' } ] }
    ]:
    rsacModisChangeDetectionProductLayers = ( rsacModisChangeDetectionProductLayers +
        '      <wmsSubgroup label="' + subgroup['label'] + '">\n' )
    for layer in subgroup['layers']:
        rsacModisChangeDetectionProductLayers = rsacModisChangeDetectionProductLayers + wmsLayerTemplate.render({
                'SELECTED'      : "",
                'SERVER_URL'    : SERVER_URL,
                'LAYER_LID'     : layer['lid'],
                'LAYER_NAME'    : layer['name'],
                'LEGEND'        : SERVER_URL+'/'+getLegend(layer['name']),
                'LAYER_VISIBLE' : layer['visible'],
                'LAYER_TITLE'   : layerTitles[layer['name']],
                'MASK'   : ''
                })
    rsacModisChangeDetectionProductLayers = rsacModisChangeDetectionProductLayers + "      </wmsSubgroup>\n"

template = Template("ews_config.tpl.xml")

if not os.path.exists("../html/view/config"):
    os.makedirs("../html/view/config")

nrtTCProductLayers = getNRTLayers(DATA_DIR + "/efetac_nasa/TrueColorData", "EFETAC-NASA_TC", "ewstruecolor", False, ".img", False)
nrt1YrProductLayers = getNRTLayers(DATA_DIR + "/efetac_nasa/1Year", "EFETAC-NASA_1Year", "ews1year", True, ".tif", True)
nrt3YrProductLayers = getNRTLayers(DATA_DIR + "/efetac_nasa/3Year", "EFETAC-NASA_3Year", "ews3year", True, ".tif", True)
nrtAllYrProductLayers = getNRTLayers(DATA_DIR + "/efetac_nasa/AllYear", "EFETAC-NASA", "ews", True, ".tif", True)
#jdm 5/31: new nrt products
#added additional param to getNRTLayers() to account for masking
nrtALC1Yr = getNRTLayers(DATA_DIR + "/efetac_nasa/X_ALC_1YR", "EFETAC-NASA_ALC1YR", "ews1year", True, ".tif", True)
nrtMUCAllYr = getNRTLayers(DATA_DIR + "/efetac_nasa/X_MUC_ALL_YR", "EFETAC-NASA_MUCAllYear", "ews", True, ".tif", True)
nrtMMAXAllYr = getNRTLayers(DATA_DIR + "/efetac_nasa/X_MMAX_ALL_YR", "EFETAC-NASA_MoMAllYear", "ews", True, ".tif", True)

drtLayers = getDRTLayers()
#End NRT 8 day & drought monitor automation-------------------------------------------------

f = open("../html/view/config/ews_config.xml", "w")
f.write(template.render( {
            'SERVER_URL'                            : SERVER_URL,
            'VIEWER_DEPLOY_DIR_URL'                 : VIEWER_DEPLOY_DIR_URL,
            'TACS_MODIS_CHANGE_DETECTION_PRODUCT_LAYERS' : tacsModisChangeDetectionProductLayers,
	        'RSAC_MODIS_CHANGE_DETECTION_PRODUCT_LAYERS' : rsacModisChangeDetectionProductLayers,
            'NRT_MODISCloud__LAYERS'  : nrtTCProductLayers,
            'NRT_1YEAR_LAYERS'        : nrt1YrProductLayers,
            'NRT_3YEAR_LAYERS'        : nrt3YrProductLayers,
            'NRT_AllYEAR_LAYERS'      : nrtAllYrProductLayers,
            'NRT_ALC1YR_LAYERS'       : nrtALC1Yr,
            'NRT_MUCALLYR_LAYERS'     : nrtMUCAllYr,
            'NRT_MMAXYR_LAYERS'       : nrtMMAXAllYr,
            'DRT_LAYERS'      : drtLayers
            }))
f.close()

if not os.path.exists("../html/cmapicons"):
    os.makedirs("../html/cmapicons")

os.system("cp -r cmapicons/* ../html/cmapicons")
os.system("cp /var/fswms.nemac.org/html/view/config/ews_config.xml /var/ol-fcav/config/ews_config.xml")