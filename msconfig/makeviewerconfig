#! /usr/bin/python

import sys, re, os, glob, getopt, time
from util import *
from xml.dom.minidom import parseString
from usdm import USDM
from vegdri import VegDRI
from smap import SMAP9kAnomalyTopWeekly as smap_weekly
from planet_config import makePlanetDotComUSDANormalizedAnalyticFourteenDayList
from glam import renderGlamLayerBlocksFor
from fw2 import makeFW2ArchiveLayerListFor, makeFW2LegacyArchiveLayerListFor, makeFW2CurrentLegacyLayerListFor, makeFW2CurrentLayerListFor
from fw3 import make_fw3_current_xml, make_fw3_archive_xml

from LegendConfig import *

opts, args = getopt.getopt(sys.argv[1:],"al")

use_all_lands = False


for opt, arg in opts:
    if opt in ("-al"):
        use_all_lands = True
        print "Using All-Lands"


def choose(al,fo):
    if use_all_lands:
        return al
    else:
        print "Using Forest-Only"
        return fo


class Template:
    def __init__(self, file=None, **args):
        if file is None and 'string' in args:
            self.contents = args['string']
        else:
            f = open(file, "r")
            self.contents = ""
            for line in f:
                self.contents = self.contents + line
            f.close
    def render(self, dict):
        return self.contents % dict


wmsLayerTemplate = Template(string="""
        <wmsLayer
          %(SELECTED)s %(BREAK)s lid="%(LAYER_LID)s"
          visible="%(LAYER_VISIBLE)s"
          url="%(SERVER_URL)s/dyna_ews?TRANSPARENT=true"
          srs="EPSG:3857"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="true"
          legend="%(LEGEND)s"
          mask="%(MASK)s"/>    
""")

nrtWMSLayerTemplate = Template(string="""
        <wmsLayer
          lid="%(LAYER_LID)s"
          visible="false"
          url="%(SERVER_URL)s/%(WRAP_NAME)s?TRANSPARENT=true"
          srs="EPSG:3857"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="true"
          legend="%(LEGEND)s"
          mask="%(MASK)s"/>    
""")
         


def getNRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            layerTitle = tif
            lid = getLID(layerName, NRT_LIDFILE_PATH)
            if legendBool:
                legend = "cmapicons/new-forwarn2-standard-legend-2.png"
            else:
              legend = ""
            if groupName == "EFETAC-NASA_TC":
                layerTitle = "True Color " + layerName[-11:]
            else:
                layerTitle = ''.join(nameform.split('.')[:-1])
            if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                if maskBool:
                    tifList.append({ 'LAYER_LID'    : lid,
                                     'WRAP_NAME'    : wrapName,
                                     'LAYER_NAME'   : layerName,
                                     'LAYER_TITLE'  : layerTitle,
                                     'SERVER_URL'   : SERVER_URL,
                                     'LEGEND'       : SERVER_URL+"/"+legend,
                                     'MASK'         : 'true'
                                     })
                else:  #no mask necessary for this one                      
                    tifList.append({ 'LAYER_LID'    : lid,
                                     'WRAP_NAME'    : wrapName,
                                     'LAYER_NAME'   : layerName,
                                     'LAYER_TITLE'  : layerTitle,
                                     'SERVER_URL'   : SERVER_URL,
                                     'LEGEND'       : SERVER_URL+"/"+legend,
                                     'MASK'         : 'false'
                                     })
            layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2017NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2017', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2016NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2016', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2015NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2015', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2014NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2014', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2013NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2013', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2012NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2012', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2011NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2011', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2010NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2010', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2009NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2009', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2008NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2008', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2007NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2007', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2006NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2006', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = "cmapicons/new-forwarn2-standard-legend-2.png"
                 else:
                     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers    

###
### Beginning of run-time code *******************************************************************************
###

if not os.path.exists(NRT_LIDFILE_PATH):
    print "Can't read required NRT LID file '%s'.  Aborting." % (NRT_LIDFILE_PATH)
    exit(-1)

if not os.path.exists(DRT_LIDFILE_PATH):
    print "Can't read required DRT LID file '%s'.  Aborting." % (DRT_LIDFILE_PATH)
    exit(-1)
        
###
### Populate 'layerTitles' dict by reading contents from "layerTitles.txt" file:
###
try:
    f = open("layerTitles.txt", "r")
    layerTitles = {}
    for line in f:
        fields = re.split(r':', line.strip())
        layerTitles[fields[0]] = re.sub(r'^.*/([^/]+)$', '\\1', fields[1])
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("january", "jan")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("febuary", "feb")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("march", "mar")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("april", "apr")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("may", "may")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("june", "jun")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("july", "jul")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("august", "aug")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("september", "sep")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("october", "oct")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("november", "nov")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("december", "dec")
    f.close()
except:
    print "Can't read file layerTitles.txt; you must run 'makemap' before running this script!"
    sys.exit(-1)


template = Template("ews_config.tpl.xml")

if not os.path.exists("../html/view/config"):
    os.makedirs("../html/view/config")

nrtTCProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/TrueColorData", "EFETAC-NASA_TC", "truecolor", False, ".img", False)
nrt1YrProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt3YrProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt5YrProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_5YEAR", "5Year"), "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrtAllYrProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
#jdm 5/31: new nrt products
#added additional param to getNRTLayers() to account for masking
nrtALC1Yr = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrtMUCAllYr = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrtMMAXAllYr = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
#get products by year
nrt20171YrProductLayers = get2017NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20161YrProductLayers = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20151YrProductLayers = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20141YrProductLayers = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20131YrProductLayers = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20121YrProductLayers = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20111YrProductLayers = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20101YrProductLayers = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20091YrProductLayers = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20081YrProductLayers = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20071YrProductLayers = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20061YrProductLayers = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20173YrProductLayers = get2017NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20163YrProductLayers = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20153YrProductLayers = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20143YrProductLayers = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20133YrProductLayers = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20123YrProductLayers = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20113YrProductLayers = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20103YrProductLayers = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20093YrProductLayers = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20083YrProductLayers = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20073YrProductLayers = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20063YrProductLayers = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20175YrProductLayers = get2017NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20165YrProductLayers = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20155YrProductLayers = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20145YrProductLayers = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20135YrProductLayers = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20125YrProductLayers = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20115YrProductLayers = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20105YrProductLayers = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20095YrProductLayers = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20085YrProductLayers = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20075YrProductLayers = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20065YrProductLayers = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt2017AllYrProductLayers = get2017NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2016AllYrProductLayers = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2015AllYrProductLayers = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2014AllYrProductLayers = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2013AllYrProductLayers = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2012AllYrProductLayers = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2011AllYrProductLayers = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2010AllYrProductLayers = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2009AllYrProductLayers = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2008AllYrProductLayers = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2007AllYrProductLayers = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2006AllYrProductLayers = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2017ALC1Yr = get2017NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2016ALC1Yr = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2015ALC1Yr = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2014ALC1Yr = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2013ALC1Yr = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2012ALC1Yr = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2011ALC1Yr = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2010ALC1Yr = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2009ALC1Yr = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2008ALC1Yr = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2007ALC1Yr = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2006ALC1Yr = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2017MUCAllYr = get2017NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2016MUCAllYr = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2015MUCAllYr = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2014MUCAllYr = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2013MUCAllYr = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2012MUCAllYr = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2011MUCAllYr = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2010MUCAllYr = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2009MUCAllYr = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2008MUCAllYr = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2007MUCAllYr = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2006MUCAllYr = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2017MMAXAllYr = get2017NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2016MMAXAllYr = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2015MMAXAllYr = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2014MMAXAllYr = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2013MMAXAllYr = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2012MMAXAllYr = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_MMAX_ALL_YR", "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2011MMAXAllYr = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_MMAX_ALL_YR", "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2010MMAXAllYr = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_MMAX_ALL_YR", "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2009MMAXAllYr = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2008MMAXAllYr = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2007MMAXAllYr = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2006MMAXAllYr = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)



usda_normalized_analytic_fourteenday = makePlanetDotComUSDANormalizedAnalyticFourteenDayList()
USDA_NORMALIZED_ANALYTIC_FOURTEENDAY_LATEST = usda_normalized_analytic_fourteenday['current']['name']
USDA_NORMALIZED_ANALYTIC_FOURTEENDAY_SECOND_LATEST = usda_normalized_analytic_fourteenday['previous']['name']
USDA_LATEST_END_DATE = usda_normalized_analytic_fourteenday['current']['date']
USDA_SECOND_LATEST_END_DATE = usda_normalized_analytic_fourteenday['previous']['date']

A_PATH_TO_FW2_PRODUCTS = os.path.join(FW2_DATA_DIR, FW2_SOURCES_AS_LIST[0], 'X_LC_1YEAR')
sentinel_landsat_date_range_template = '{0}/{1}'
SENTINEL2_CURRENT_DATE_RANGE = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, sentinel_landsat_date_range_template)
SENTINEL2_PRIOR_YEAR_DATE_RANGE = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, sentinel_landsat_date_range_template, prior_year=True)

LANDSAT8_CURRENT_DATE_RANGE = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, sentinel_landsat_date_range_template)
LANDSAT8_PRIOR_YEAR_DATE_RANGE = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, sentinel_landsat_date_range_template, prior_year=True)

FW2_LEGACY_2019_PRIOR_YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_1YEAR', '2019')
FW2_LEGACY_2018_PRIOR_YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_1YEAR', '2018')
FW2_LEGACY_2017_PRIOR_YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_1YEAR', '2017')
FW2_LEGACY_2016_PRIOR_YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_1YEAR', '2016')

FW2_LEGACY_2019_3YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_3YEAR', '2019')
FW2_LEGACY_2018_3YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_3YEAR', '2018')
FW2_LEGACY_2017_3YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_3YEAR', '2017')
FW2_LEGACY_2016_3YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_3YEAR', '2016')

FW2_LEGACY_2019_ALC = makeFW2LegacyArchiveLayerListFor('X_LC_ALC_1YR', '2019')
FW2_LEGACY_2018_ALC = makeFW2LegacyArchiveLayerListFor('X_LC_ALC_1YR', '2018')
FW2_LEGACY_2017_ALC = makeFW2LegacyArchiveLayerListFor('X_LC_ALC_1YR', '2017')
FW2_LEGACY_2016_ALC = makeFW2LegacyArchiveLayerListFor('X_LC_ALC_1YR', '2016')

FW2_LEGACY_2019_5YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_5YEAR', '2019')
FW2_LEGACY_2018_5YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_5YEAR', '2018')
FW2_LEGACY_2017_5YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_5YEAR', '2017')
FW2_LEGACY_2016_5YEAR = makeFW2LegacyArchiveLayerListFor('X_LC_5YEAR', '2016')

FW2_LEGACY_2019_ALLYEAR = makeFW2LegacyArchiveLayerListFor('X_LC_ALLYEAR', '2019')
FW2_LEGACY_2018_ALLYEAR = makeFW2LegacyArchiveLayerListFor('X_LC_ALLYEAR', '2018')
FW2_LEGACY_2017_ALLYEAR = makeFW2LegacyArchiveLayerListFor('X_LC_ALLYEAR', '2017')
FW2_LEGACY_2016_ALLYEAR = makeFW2LegacyArchiveLayerListFor('X_LC_ALLYEAR', '2016')

FW2_LEGACY_2019_MUC = makeFW2LegacyArchiveLayerListFor('X_LC_MUC_ALL_YR', '2019')
FW2_LEGACY_2018_MUC = makeFW2LegacyArchiveLayerListFor('X_LC_MUC_ALL_YR', '2018')
FW2_LEGACY_2017_MUC = makeFW2LegacyArchiveLayerListFor('X_LC_MUC_ALL_YR', '2017')
FW2_LEGACY_2016_MUC = makeFW2LegacyArchiveLayerListFor('X_LC_MUC_ALL_YR', '2016')

FW2_LEGACY_2019_MMAX = makeFW2LegacyArchiveLayerListFor('X_LC_MMAX_ALL_YR', '2019')
FW2_LEGACY_2018_MMAX = makeFW2LegacyArchiveLayerListFor('X_LC_MMAX_ALL_YR', '2018')
FW2_LEGACY_2017_MMAX = makeFW2LegacyArchiveLayerListFor('X_LC_MMAX_ALL_YR', '2017')
FW2_LEGACY_2016_MMAX = makeFW2LegacyArchiveLayerListFor('X_LC_MMAX_ALL_YR', '2016')

GLAM_WMTS_2022_LAYERS = renderGlamLayerBlocksFor('2022')
GLAM_WMTS_2021_LAYERS = renderGlamLayerBlocksFor('2021')
GLAM_WMTS_2020_LAYERS = renderGlamLayerBlocksFor('2020')

FW2_ARCHIVE_2022__PRIOR_YEAR = makeFW2ArchiveLayerListFor('X_LC_1YEAR', '2022')
FW2_ARCHIVE_2021__PRIOR_YEAR = makeFW2ArchiveLayerListFor('X_LC_1YEAR', '2021')
FW2_ARCHIVE_2020__PRIOR_YEAR = makeFW2ArchiveLayerListFor('X_LC_1YEAR', '2020')
FW2_ARCHIVE_2019__PRIOR_YEAR = makeFW2ArchiveLayerListFor('X_LC_1YEAR', '2019')
FW2_ARCHIVE_2018__PRIOR_YEAR = makeFW2ArchiveLayerListFor('X_LC_1YEAR', '2018')
FW2_ARCHIVE_2017__PRIOR_YEAR = makeFW2ArchiveLayerListFor('X_LC_1YEAR', '2017')
FW2_ARCHIVE_2016__PRIOR_YEAR = makeFW2ArchiveLayerListFor('X_LC_1YEAR', '2016')

FW2_ARCHIVE_2022__ALC = makeFW2ArchiveLayerListFor('X_LC_ALC_1YR', '2022')
FW2_ARCHIVE_2021__ALC = makeFW2ArchiveLayerListFor('X_LC_ALC_1YR', '2021')
FW2_ARCHIVE_2020__ALC = makeFW2ArchiveLayerListFor('X_LC_ALC_1YR', '2020')
FW2_ARCHIVE_2019__ALC = makeFW2ArchiveLayerListFor('X_LC_ALC_1YR', '2019')
FW2_ARCHIVE_2018__ALC = makeFW2ArchiveLayerListFor('X_LC_ALC_1YR', '2018')
FW2_ARCHIVE_2017__ALC = makeFW2ArchiveLayerListFor('X_LC_ALC_1YR', '2017')
FW2_ARCHIVE_2016__ALC = makeFW2ArchiveLayerListFor('X_LC_ALC_1YR', '2016')

FW2_ARCHIVE_2022__3_YEAR = makeFW2ArchiveLayerListFor('X_LC_3YEAR', '2022')
FW2_ARCHIVE_2021__3_YEAR = makeFW2ArchiveLayerListFor('X_LC_3YEAR', '2021')
FW2_ARCHIVE_2020__3_YEAR = makeFW2ArchiveLayerListFor('X_LC_3YEAR', '2020')
FW2_ARCHIVE_2019__3_YEAR = makeFW2ArchiveLayerListFor('X_LC_3YEAR', '2019')
FW2_ARCHIVE_2018__3_YEAR = makeFW2ArchiveLayerListFor('X_LC_3YEAR', '2018')
FW2_ARCHIVE_2017__3_YEAR = makeFW2ArchiveLayerListFor('X_LC_3YEAR', '2017')
FW2_ARCHIVE_2016__3_YEAR = makeFW2ArchiveLayerListFor('X_LC_3YEAR', '2016')

FW2_ARCHIVE_2022__5_YEAR = makeFW2ArchiveLayerListFor('X_LC_5YEAR', '2022')
FW2_ARCHIVE_2021__5_YEAR = makeFW2ArchiveLayerListFor('X_LC_5YEAR', '2021')
FW2_ARCHIVE_2020__5_YEAR = makeFW2ArchiveLayerListFor('X_LC_5YEAR', '2020')
FW2_ARCHIVE_2019__5_YEAR = makeFW2ArchiveLayerListFor('X_LC_5YEAR', '2019')
FW2_ARCHIVE_2018__5_YEAR = makeFW2ArchiveLayerListFor('X_LC_5YEAR', '2018')
FW2_ARCHIVE_2017__5_YEAR = makeFW2ArchiveLayerListFor('X_LC_5YEAR', '2017')
FW2_ARCHIVE_2016__5_YEAR = makeFW2ArchiveLayerListFor('X_LC_5YEAR', '2016')

FW2_ARCHIVE_2022__10_YEAR = makeFW2ArchiveLayerListFor('X_LC_90_10_YR', '2022')
FW2_ARCHIVE_2021__10_YEAR = makeFW2ArchiveLayerListFor('X_LC_90_10_YR', '2021')
FW2_ARCHIVE_2020__10_YEAR = makeFW2ArchiveLayerListFor('X_LC_90_10_YR', '2020')
FW2_ARCHIVE_2019__10_YEAR = makeFW2ArchiveLayerListFor('X_LC_90_10_YR', '2019')
FW2_ARCHIVE_2018__10_YEAR = makeFW2ArchiveLayerListFor('X_LC_90_10_YR', '2018')
#FW2_ARCHIVE_2017__10_YEAR = makeFW2ArchiveLayerListFor('X_LC_90_10_YR', '2017')
#FW2_ARCHIVE_2016__10_YEAR = makeFW2ArchiveLayerListFor('X_LC_90_10_YR', '2016')

FW2_ARCHIVE_2022__YEAR_MEDIAN = makeFW2ArchiveLayerListFor('X_LC_MEDIAN_ALL_YR', '2022')
FW2_ARCHIVE_2021__YEAR_MEDIAN = makeFW2ArchiveLayerListFor('X_LC_MEDIAN_ALL_YR', '2021')
FW2_ARCHIVE_2020__YEAR_MEDIAN = makeFW2ArchiveLayerListFor('X_LC_MEDIAN_ALL_YR', '2020')
FW2_ARCHIVE_2019__YEAR_MEDIAN = makeFW2ArchiveLayerListFor('X_LC_MEDIAN_ALL_YR', '2019')
FW2_ARCHIVE_2018__YEAR_MEDIAN = makeFW2ArchiveLayerListFor('X_LC_MEDIAN_ALL_YR', '2018')
#FW2_ARCHIVE_2017__YEAR_MEDIAN = makeFW2ArchiveLayerListFor('X_LC_MEDIAN_ALL_YR', '2017')
#FW2_ARCHIVE_2016__YEAR_MEDIAN = makeFW2ArchiveLayerListFor('X_LC_MEDIAN_ALL_YR', '2016')

FW2_ARCHIVE_2022__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2022')
FW2_ARCHIVE_2021__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2021')
FW2_ARCHIVE_2020__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2020')
FW2_ARCHIVE_2019__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2019')
FW2_ARCHIVE_2018__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2018')
FW2_ARCHIVE_2017__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2017')
FW2_ARCHIVE_2016__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2016')
FW2_ARCHIVE_2015__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2015')
FW2_ARCHIVE_2014__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2014')
FW2_ARCHIVE_2013__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2013')
FW2_ARCHIVE_2012__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2012')
FW2_ARCHIVE_2011__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2011')
FW2_ARCHIVE_2010__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2010')
FW2_ARCHIVE_2009__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2009')
FW2_ARCHIVE_2008__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2008')
FW2_ARCHIVE_2007__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2007')
FW2_ARCHIVE_2006__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2006')
FW2_ARCHIVE_2005__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2005')
FW2_ARCHIVE_2004__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2004')
FW2_ARCHIVE_2003__PCTPROGRESS = makeFW2ArchiveLayerListFor('X_LC_PCTPROGRESS', '2003')


FW2_CURRENT_LAYERS__PRIOR_YEAR = makeFW2CurrentLayerListFor('X_LC_1YEAR', 'current')
FW2_CURRENT_LAYERS__ALC = makeFW2CurrentLayerListFor('X_LC_ALC_1YR', 'current')
FW2_CURRENT_LAYERS__3_YEAR = makeFW2CurrentLayerListFor('X_LC_3YEAR', 'current')
FW2_CURRENT_LAYERS__5_YEAR = makeFW2CurrentLayerListFor('X_LC_5YEAR', 'current')
FW2_CURRENT_LAYERS__10_YEAR = makeFW2CurrentLayerListFor('X_LC_90_10_YR', 'current')
FW2_CURRENT_LAYERS__YEAR_MEDIAN = makeFW2CurrentLayerListFor('X_LC_MEDIAN_ALL_YR', 'current')
FW2_CURRENT_LAYERS__PCTPROGRESS = makeFW2CurrentLayerListFor('X_LC_PCTPROGRESS', 'current')

FW2_CURRENT_LEGACY_LAYERS__PRIOR_YEAR = makeFW2CurrentLayerListFor('X_LC_1YEAR', 'current_legacy')
FW2_CURRENT_LEGACY_LAYERS__ALC = makeFW2CurrentLayerListFor('X_LC_ALC_1YR', 'current_legacy')
FW2_CURRENT_LEGACY_LAYERS__3_YEAR = makeFW2CurrentLayerListFor('X_LC_3YEAR', 'current_legacy')
FW2_CURRENT_LEGACY_LAYERS__5_YEAR = makeFW2CurrentLayerListFor('X_LC_5YEAR', 'current_legacy')
FW2_CURRENT_LEGACY_LAYERS__ALLYEAR = makeFW2CurrentLayerListFor('X_LC_ALLYEAR', 'current_legacy')
FW2_CURRENT_LEGACY_LAYERS__MUC = makeFW2CurrentLayerListFor('X_LC_MUC_ALL_YR', 'current_legacy')
FW2_CURRENT_LEGACY_LAYERS__MMAX = makeFW2CurrentLayerListFor('X_LC_MMAX_ALL_YR', 'current_legacy')

FW3_CURRENT = make_fw3_current_xml()
FW3_ARCHIVE = make_fw3_archive_xml()

pwd = A_PATH_TO_FW2_PRODUCTS
current_dates = getCurrentDates(pwd)
date_ranges = map(getMonthAndDayDateRangeString, current_dates)

CURRENT_DATE_RANGE = date_ranges[0]
PREVIOUS1_DATE_RANGE = date_ranges[1]
PREVIOUS2_DATE_RANGE = date_ranges[2]

smap_layer = smap_weekly()
SMAP_9K_ANOMALY_TOP_WEEKLY = smap_layer.render_view_tpl()

usdm_manager = USDM()
usdm_layers = usdm_manager.render()

# Removing this for now
#vegdri = VegDRI()

f = open("../html/view/config/ews_config.xml", "w")
fMin = open("../html/view/config/ews_config_min.xml", "w+")

configXML = template.render( {
            'MULTIGRAPH_SERVICE_URL'                : MULTIGRAPH_SERVICE_URL,
            'SERVER_URL'                            : SERVER_URL,
            'VIEWER_DEPLOY_DIR_URL'                 : VIEWER_DEPLOY_DIR_URL,
            'PLANET_API_KEY'          : PLANET_API_KEY,
            'FW3_ARCHIVE'              : FW3_ARCHIVE,
            'FW3_CURRENT'             : FW3_CURRENT,
            'SMAP_9K_ANOMALY_TOP_WEEKLY' : SMAP_9K_ANOMALY_TOP_WEEKLY,
            'NRT_MODISCloud__LAYERS'  : nrtTCProductLayers,
            'NRT_1YEAR_LAYERS'        : nrt1YrProductLayers,
            'NRT_3YEAR_LAYERS'        : nrt3YrProductLayers,
            'NRT_5YEAR_LAYERS'        : nrt5YrProductLayers,
            'NRT_AllYEAR_LAYERS'      : nrtAllYrProductLayers,
            'NRT_ALC1YR_LAYERS'       : nrtALC1Yr,
            'NRT_MUCALLYR_LAYERS'     : nrtMUCAllYr,
            'NRT_MMAXYR_LAYERS'       : nrtMMAXAllYr,
            'NRT_2016_1YEAR_LAYERS'        : nrt20161YrProductLayers,
            'NRT_2015_1YEAR_LAYERS'        : nrt20151YrProductLayers,
            'NRT_2014_1YEAR_LAYERS'        : nrt20141YrProductLayers,
            'NRT_2013_1YEAR_LAYERS'        : nrt20131YrProductLayers,
            'NRT_2012_1YEAR_LAYERS'        : nrt20121YrProductLayers,
            'NRT_2011_1YEAR_LAYERS'        : nrt20111YrProductLayers,
            'NRT_2010_1YEAR_LAYERS'        : nrt20101YrProductLayers,
            'NRT_2009_1YEAR_LAYERS'        : nrt20091YrProductLayers,
            'NRT_2008_1YEAR_LAYERS'        : nrt20081YrProductLayers,
            'NRT_2007_1YEAR_LAYERS'        : nrt20071YrProductLayers,
            'NRT_2006_1YEAR_LAYERS'        : nrt20061YrProductLayers,
            'NRT_2017_3YEAR_LAYERS'        : nrt20173YrProductLayers,
            'NRT_2016_3YEAR_LAYERS'        : nrt20163YrProductLayers,
            'NRT_2015_3YEAR_LAYERS'        : nrt20153YrProductLayers,
            'NRT_2014_3YEAR_LAYERS'        : nrt20143YrProductLayers,
            'NRT_2013_3YEAR_LAYERS'        : nrt20133YrProductLayers,
            'NRT_2012_3YEAR_LAYERS'        : nrt20123YrProductLayers,
            'NRT_2011_3YEAR_LAYERS'        : nrt20113YrProductLayers,
            'NRT_2010_3YEAR_LAYERS'        : nrt20103YrProductLayers,
            'NRT_2009_3YEAR_LAYERS'        : nrt20093YrProductLayers,
            'NRT_2008_3YEAR_LAYERS'        : nrt20083YrProductLayers,
            'NRT_2007_3YEAR_LAYERS'        : nrt20073YrProductLayers,
            'NRT_2006_3YEAR_LAYERS'        : nrt20063YrProductLayers,
            'NRT_2017_5YEAR_LAYERS'        : nrt20175YrProductLayers,
            'NRT_2016_5YEAR_LAYERS'        : nrt20165YrProductLayers,
            'NRT_2015_5YEAR_LAYERS'        : nrt20155YrProductLayers,
            'NRT_2014_5YEAR_LAYERS'        : nrt20145YrProductLayers,
            'NRT_2013_5YEAR_LAYERS'        : nrt20135YrProductLayers,
            'NRT_2012_5YEAR_LAYERS'        : nrt20125YrProductLayers,
            'NRT_2011_5YEAR_LAYERS'        : nrt20115YrProductLayers,
            'NRT_2010_5YEAR_LAYERS'        : nrt20105YrProductLayers,
            'NRT_2009_5YEAR_LAYERS'        : nrt20095YrProductLayers,
            'NRT_2008_5YEAR_LAYERS'        : nrt20085YrProductLayers,
            'NRT_2007_5YEAR_LAYERS'        : nrt20075YrProductLayers,
            'NRT_2006_5YEAR_LAYERS'        : nrt20065YrProductLayers,
            'NRT_2016_AllYEAR_LAYERS'      : nrt2016AllYrProductLayers,
            'NRT_2015_AllYEAR_LAYERS'      : nrt2015AllYrProductLayers,
            'NRT_2014_AllYEAR_LAYERS'      : nrt2014AllYrProductLayers,
            'NRT_2013_AllYEAR_LAYERS'      : nrt2013AllYrProductLayers,
            'NRT_2012_AllYEAR_LAYERS'      : nrt2012AllYrProductLayers,
            'NRT_2011_AllYEAR_LAYERS'      : nrt2011AllYrProductLayers,
            'NRT_2010_AllYEAR_LAYERS'      : nrt2010AllYrProductLayers,
            'NRT_2009_AllYEAR_LAYERS'      : nrt2009AllYrProductLayers,
            'NRT_2008_AllYEAR_LAYERS'      : nrt2008AllYrProductLayers,
            'NRT_2007_AllYEAR_LAYERS'      : nrt2007AllYrProductLayers,
            'NRT_2006_AllYEAR_LAYERS'      : nrt2006AllYrProductLayers,
            'NRT_2016_ALC1YR_LAYERS'       : nrt2016ALC1Yr,
            'NRT_2015_ALC1YR_LAYERS'       : nrt2015ALC1Yr,
            'NRT_2014_ALC1YR_LAYERS'       : nrt2014ALC1Yr,
            'NRT_2013_ALC1YR_LAYERS'       : nrt2013ALC1Yr,
            'NRT_2012_ALC1YR_LAYERS'       : nrt2012ALC1Yr,
            'NRT_2011_ALC1YR_LAYERS'       : nrt2011ALC1Yr,
            'NRT_2010_ALC1YR_LAYERS'       : nrt2010ALC1Yr,
            'NRT_2009_ALC1YR_LAYERS'       : nrt2009ALC1Yr,
            'NRT_2008_ALC1YR_LAYERS'       : nrt2008ALC1Yr,
            'NRT_2007_ALC1YR_LAYERS'       : nrt2007ALC1Yr,
            'NRT_2006_ALC1YR_LAYERS'       : nrt2006ALC1Yr,
            'NRT_2016_MUCALLYR_LAYERS'     : nrt2016MUCAllYr,
            'NRT_2015_MUCALLYR_LAYERS'     : nrt2015MUCAllYr,
            'NRT_2014_MUCALLYR_LAYERS'     : nrt2014MUCAllYr,
            'NRT_2013_MUCALLYR_LAYERS'     : nrt2013MUCAllYr,
            'NRT_2012_MUCALLYR_LAYERS'     : nrt2012MUCAllYr,
            'NRT_2011_MUCALLYR_LAYERS'     : nrt2011MUCAllYr,
            'NRT_2010_MUCALLYR_LAYERS'     : nrt2010MUCAllYr,
            'NRT_2009_MUCALLYR_LAYERS'     : nrt2009MUCAllYr,
            'NRT_2008_MUCALLYR_LAYERS'     : nrt2008MUCAllYr,
            'NRT_2007_MUCALLYR_LAYERS'     : nrt2007MUCAllYr,
            'NRT_2006_MUCALLYR_LAYERS'     : nrt2006MUCAllYr,
            'NRT_2016_MMAXYR_LAYERS'       : nrt2016MMAXAllYr,
            'NRT_2015_MMAXYR_LAYERS'       : nrt2015MMAXAllYr,
            'NRT_2014_MMAXYR_LAYERS'       : nrt2014MMAXAllYr,
            'NRT_2013_MMAXYR_LAYERS'       : nrt2013MMAXAllYr,
            'NRT_2012_MMAXYR_LAYERS'       : nrt2012MMAXAllYr,
            'NRT_2011_MMAXYR_LAYERS'       : nrt2011MMAXAllYr,
            'NRT_2010_MMAXYR_LAYERS'       : nrt2010MMAXAllYr,
            'NRT_2009_MMAXYR_LAYERS'       : nrt2009MMAXAllYr,
            'NRT_2008_MMAXYR_LAYERS'       : nrt2008MMAXAllYr,
            'NRT_2007_MMAXYR_LAYERS'       : nrt2007MMAXAllYr,
            'NRT_2006_MMAXYR_LAYERS'       : nrt2006MMAXAllYr,
            'GLAM_WMTS_2022_LAYERS' : GLAM_WMTS_2022_LAYERS,
            'GLAM_WMTS_2021_LAYERS' : GLAM_WMTS_2021_LAYERS,
            'GLAM_WMTS_2020_LAYERS' : GLAM_WMTS_2020_LAYERS,
            'USDM_LAYERS'      : usdm_layers,
            'FW2_CURRENT_LAYERS__PRIOR_YEAR' : FW2_CURRENT_LAYERS__PRIOR_YEAR,
            'FW2_CURRENT_LAYERS__ALC' : FW2_CURRENT_LAYERS__ALC,
            'FW2_CURRENT_LAYERS__3_YEAR' : FW2_CURRENT_LAYERS__3_YEAR,
            'FW2_CURRENT_LAYERS__5_YEAR' : FW2_CURRENT_LAYERS__5_YEAR,
            'FW2_CURRENT_LAYERS__10_YEAR' : FW2_CURRENT_LAYERS__10_YEAR,
            'FW2_CURRENT_LAYERS__YEAR_MEDIAN' : FW2_CURRENT_LAYERS__YEAR_MEDIAN,
            'FW2_CURRENT_LAYERS__PCTPROGRESS' : FW2_CURRENT_LAYERS__PCTPROGRESS,
            'FW2_LEGACY_2019_PRIOR_YEAR' : FW2_LEGACY_2019_PRIOR_YEAR,
            'FW2_LEGACY_2018_PRIOR_YEAR' : FW2_LEGACY_2018_PRIOR_YEAR,
            'FW2_LEGACY_2017_PRIOR_YEAR' : FW2_LEGACY_2017_PRIOR_YEAR,
            'FW2_LEGACY_2016_PRIOR_YEAR' : FW2_LEGACY_2016_PRIOR_YEAR,
            'FW2_LEGACY_2019_3YEAR' : FW2_LEGACY_2019_3YEAR,
            'FW2_LEGACY_2018_3YEAR' : FW2_LEGACY_2018_3YEAR,
            'FW2_LEGACY_2017_3YEAR' : FW2_LEGACY_2017_3YEAR,
            'FW2_LEGACY_2016_3YEAR' : FW2_LEGACY_2016_3YEAR,
            'FW2_LEGACY_2019_ALC' : FW2_LEGACY_2019_ALC,
            'FW2_LEGACY_2018_ALC' : FW2_LEGACY_2018_ALC,
            'FW2_LEGACY_2017_ALC' : FW2_LEGACY_2017_ALC,
            'FW2_LEGACY_2016_ALC' : FW2_LEGACY_2016_ALC,
            'FW2_LEGACY_2019_5YEAR' : FW2_LEGACY_2019_5YEAR,
            'FW2_LEGACY_2018_5YEAR' : FW2_LEGACY_2018_5YEAR,
            'FW2_LEGACY_2017_5YEAR' : FW2_LEGACY_2017_5YEAR,
            'FW2_LEGACY_2016_5YEAR' : FW2_LEGACY_2016_5YEAR,
            'FW2_LEGACY_2019_ALLYEAR' : FW2_LEGACY_2019_ALLYEAR,
            'FW2_LEGACY_2018_ALLYEAR' : FW2_LEGACY_2018_ALLYEAR,
            'FW2_LEGACY_2017_ALLYEAR' : FW2_LEGACY_2017_ALLYEAR,
            'FW2_LEGACY_2016_ALLYEAR' : FW2_LEGACY_2016_ALLYEAR,
            'FW2_LEGACY_2019_MUC' : FW2_LEGACY_2019_MUC,
            'FW2_LEGACY_2018_MUC' : FW2_LEGACY_2018_MUC,
            'FW2_LEGACY_2017_MUC' : FW2_LEGACY_2017_MUC,
            'FW2_LEGACY_2016_MUC' : FW2_LEGACY_2016_MUC,
            'FW2_LEGACY_2019_MMAX' : FW2_LEGACY_2019_MMAX,
            'FW2_LEGACY_2018_MMAX' : FW2_LEGACY_2018_MMAX,
            'FW2_LEGACY_2017_MMAX' : FW2_LEGACY_2017_MMAX,
            'FW2_LEGACY_2016_MMAX' : FW2_LEGACY_2016_MMAX,
            'FW2_CURRENT_LEGACY_LAYERS__PRIOR_YEAR' : FW2_CURRENT_LEGACY_LAYERS__PRIOR_YEAR,
            'FW2_CURRENT_LEGACY_LAYERS__ALC' : FW2_CURRENT_LEGACY_LAYERS__ALC,
            'FW2_CURRENT_LEGACY_LAYERS__3_YEAR' : FW2_CURRENT_LEGACY_LAYERS__3_YEAR,
            'FW2_CURRENT_LEGACY_LAYERS__5_YEAR' : FW2_CURRENT_LEGACY_LAYERS__5_YEAR,
            'FW2_CURRENT_LEGACY_LAYERS__ALLYEAR' : FW2_CURRENT_LEGACY_LAYERS__ALLYEAR,
            'FW2_CURRENT_LEGACY_LAYERS__MUC' : FW2_CURRENT_LEGACY_LAYERS__MUC,
            'FW2_CURRENT_LEGACY_LAYERS__MMAX' : FW2_CURRENT_LEGACY_LAYERS__MMAX,
            'FW2_ARCHIVE_2022__PRIOR_YEAR' : FW2_ARCHIVE_2022__PRIOR_YEAR,
            'FW2_ARCHIVE_2021__PRIOR_YEAR' : FW2_ARCHIVE_2021__PRIOR_YEAR,
            'FW2_ARCHIVE_2020__PRIOR_YEAR' : FW2_ARCHIVE_2020__PRIOR_YEAR,
            'FW2_ARCHIVE_2019__PRIOR_YEAR' : FW2_ARCHIVE_2019__PRIOR_YEAR,
            'FW2_ARCHIVE_2018__PRIOR_YEAR' : FW2_ARCHIVE_2018__PRIOR_YEAR,
            'FW2_ARCHIVE_2017__PRIOR_YEAR' : FW2_ARCHIVE_2017__PRIOR_YEAR,
            'FW2_ARCHIVE_2016__PRIOR_YEAR' : FW2_ARCHIVE_2016__PRIOR_YEAR,
            'FW2_ARCHIVE_2022__ALC' : FW2_ARCHIVE_2022__ALC,
            'FW2_ARCHIVE_2021__ALC' : FW2_ARCHIVE_2021__ALC,
            'FW2_ARCHIVE_2020__ALC' : FW2_ARCHIVE_2020__ALC,
            'FW2_ARCHIVE_2019__ALC' : FW2_ARCHIVE_2019__ALC,
            'FW2_ARCHIVE_2018__ALC' : FW2_ARCHIVE_2018__ALC,
            'FW2_ARCHIVE_2017__ALC' : FW2_ARCHIVE_2017__ALC,
            'FW2_ARCHIVE_2016__ALC' : FW2_ARCHIVE_2016__ALC,
            'FW2_ARCHIVE_2022__3_YEAR' : FW2_ARCHIVE_2022__3_YEAR,
            'FW2_ARCHIVE_2021__3_YEAR' : FW2_ARCHIVE_2021__3_YEAR,
            'FW2_ARCHIVE_2020__3_YEAR' : FW2_ARCHIVE_2020__3_YEAR,
            'FW2_ARCHIVE_2019__3_YEAR' : FW2_ARCHIVE_2019__3_YEAR,
            'FW2_ARCHIVE_2018__3_YEAR' : FW2_ARCHIVE_2018__3_YEAR,
            'FW2_ARCHIVE_2017__3_YEAR' : FW2_ARCHIVE_2017__3_YEAR,
            'FW2_ARCHIVE_2016__3_YEAR' : FW2_ARCHIVE_2016__3_YEAR,
            'FW2_ARCHIVE_2022__5_YEAR' : FW2_ARCHIVE_2022__5_YEAR,
            'FW2_ARCHIVE_2021__5_YEAR' : FW2_ARCHIVE_2021__5_YEAR,
            'FW2_ARCHIVE_2020__5_YEAR' : FW2_ARCHIVE_2020__5_YEAR,
            'FW2_ARCHIVE_2019__5_YEAR' : FW2_ARCHIVE_2019__5_YEAR,
            'FW2_ARCHIVE_2018__5_YEAR' : FW2_ARCHIVE_2018__5_YEAR,
            'FW2_ARCHIVE_2017__5_YEAR' : FW2_ARCHIVE_2017__5_YEAR,
            'FW2_ARCHIVE_2016__5_YEAR' : FW2_ARCHIVE_2016__5_YEAR,
            'FW2_ARCHIVE_2022__10_YEAR' : FW2_ARCHIVE_2022__10_YEAR,
            'FW2_ARCHIVE_2021__10_YEAR' : FW2_ARCHIVE_2021__10_YEAR,
            'FW2_ARCHIVE_2020__10_YEAR' : FW2_ARCHIVE_2020__10_YEAR,
            'FW2_ARCHIVE_2019__10_YEAR' : FW2_ARCHIVE_2019__10_YEAR,
            'FW2_ARCHIVE_2018__10_YEAR' : FW2_ARCHIVE_2018__10_YEAR,
            'FW2_ARCHIVE_2022__YEAR_MEDIAN' : FW2_ARCHIVE_2022__YEAR_MEDIAN,
            'FW2_ARCHIVE_2021__YEAR_MEDIAN' : FW2_ARCHIVE_2021__YEAR_MEDIAN,
            'FW2_ARCHIVE_2020__YEAR_MEDIAN' : FW2_ARCHIVE_2020__YEAR_MEDIAN,
            'FW2_ARCHIVE_2019__YEAR_MEDIAN' : FW2_ARCHIVE_2019__YEAR_MEDIAN,
            'FW2_ARCHIVE_2018__YEAR_MEDIAN' : FW2_ARCHIVE_2018__YEAR_MEDIAN,
            'FW2_ARCHIVE_2022__PCTPROGRESS' : FW2_ARCHIVE_2022__PCTPROGRESS,
            'FW2_ARCHIVE_2021__PCTPROGRESS' : FW2_ARCHIVE_2021__PCTPROGRESS,
            'FW2_ARCHIVE_2020__PCTPROGRESS' : FW2_ARCHIVE_2020__PCTPROGRESS,
            'FW2_ARCHIVE_2019__PCTPROGRESS' : FW2_ARCHIVE_2019__PCTPROGRESS,
            'FW2_ARCHIVE_2018__PCTPROGRESS' : FW2_ARCHIVE_2018__PCTPROGRESS,
            'FW2_ARCHIVE_2017__PCTPROGRESS' : FW2_ARCHIVE_2017__PCTPROGRESS,
            'FW2_ARCHIVE_2016__PCTPROGRESS' : FW2_ARCHIVE_2016__PCTPROGRESS,
            'FW2_ARCHIVE_2015__PCTPROGRESS' : FW2_ARCHIVE_2015__PCTPROGRESS,
            'FW2_ARCHIVE_2014__PCTPROGRESS' : FW2_ARCHIVE_2014__PCTPROGRESS,
            'FW2_ARCHIVE_2013__PCTPROGRESS' : FW2_ARCHIVE_2013__PCTPROGRESS,
            'FW2_ARCHIVE_2012__PCTPROGRESS' : FW2_ARCHIVE_2012__PCTPROGRESS,
            'FW2_ARCHIVE_2011__PCTPROGRESS' : FW2_ARCHIVE_2011__PCTPROGRESS,
            'FW2_ARCHIVE_2010__PCTPROGRESS' : FW2_ARCHIVE_2010__PCTPROGRESS,
            'FW2_ARCHIVE_2009__PCTPROGRESS' : FW2_ARCHIVE_2009__PCTPROGRESS,
            'FW2_ARCHIVE_2008__PCTPROGRESS' : FW2_ARCHIVE_2008__PCTPROGRESS,
            'FW2_ARCHIVE_2007__PCTPROGRESS' : FW2_ARCHIVE_2007__PCTPROGRESS,
            'FW2_ARCHIVE_2006__PCTPROGRESS' : FW2_ARCHIVE_2006__PCTPROGRESS,
            'FW2_ARCHIVE_2005__PCTPROGRESS' : FW2_ARCHIVE_2005__PCTPROGRESS,
            'FW2_ARCHIVE_2004__PCTPROGRESS' : FW2_ARCHIVE_2004__PCTPROGRESS,
            'FW2_ARCHIVE_2003__PCTPROGRESS' : FW2_ARCHIVE_2003__PCTPROGRESS,
            'SENTINEL2_CURRENT_DATE_RANGE' : SENTINEL2_CURRENT_DATE_RANGE,
            'SENTINEL2_PRIOR_YEAR_DATE_RANGE' : SENTINEL2_PRIOR_YEAR_DATE_RANGE,
            'LANDSAT8_CURRENT_DATE_RANGE': LANDSAT8_CURRENT_DATE_RANGE,
            'LANDSAT8_PRIOR_YEAR_DATE_RANGE': LANDSAT8_PRIOR_YEAR_DATE_RANGE,
            'CURRENT_DATE_RANGE' : CURRENT_DATE_RANGE,
            'PREVIOUS1_DATE_RANGE' : PREVIOUS1_DATE_RANGE,
            'PREVIOUS2_DATE_RANGE' : PREVIOUS2_DATE_RANGE,
            'USDA_NORMALIZED_ANALYTIC_FOURTEENDAY_LATEST' : USDA_NORMALIZED_ANALYTIC_FOURTEENDAY_LATEST,
            'USDA_NORMALIZED_ANALYTIC_FOURTEENDAY_SECOND_LATEST' : USDA_NORMALIZED_ANALYTIC_FOURTEENDAY_SECOND_LATEST,
            'USDA_LATEST_END_DATE' : USDA_LATEST_END_DATE,
            'USDA_SECOND_LATEST_END_DATE' : USDA_SECOND_LATEST_END_DATE
          })

minXML = parseString(configXML).toprettyxml('', '', 'UTF-8')
minXML = minXML.splitlines()
minXML = map(str.strip, minXML)
minXML = ''.join(minXML)

f.write(configXML)
fMin.write(minXML)

f.close()
fMin.close()

if not os.path.exists("../html/cmapicons"):
    os.makedirs("../html/cmapicons")

os.system("cp -r cmapicons/* ../html/cmapicons")
#os.system("cp /var/fswms.nemac.org/html/view/config/ews_config.xml /var/ol-fcav/config/ews_config.xml")


