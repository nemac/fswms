#! /usr/bin/python

import sys, re, os, getopt
from xml.dom.minidom import parseString

sys.path.append("../var")
try:
    from Config import *
    from datetime import timedelta
    from datetime import datetime    
except:
    print "Cannot find local settings file 'Config.py'.  You need to create a Config.py file that contains"
    print "settings appropriate for this copy of the FSWMS project.  You can use the file 'Config.tpl.py'"
    print "as a starting point --- make a copy of that file called 'Config.py', and edit appropriately."
    exit(-1)

from LegendConfig import *


opts, args = getopt.getopt(sys.argv[1:],"al")

use_all_lands = False

processed_lids = dict()

for opt, arg in opts:
	if opt in ("-al"):
		use_all_lands = True
		print "Using All-Lands"


def choose(al,fo):
    if use_all_lands:
		return al
    else:
		print "Using Forest-Only"
		return fo


class Template:
    def __init__(self, file=None, **args):
        if file is None and 'string' in args:
            self.contents = args['string']
        else:
            f = open(file, "r")
            self.contents = ""
            for line in f:
                self.contents = self.contents + line
            f.close
    def render(self, dict):
        return self.contents % dict

wmsLayerTemplate = Template(string="""
        <wmsLayer
          %(SELECTED)slid="%(LAYER_LID)s"
          visible="%(LAYER_VISIBLE)s"
          url="%(SERVER_URL)s/dyna_ews?TRANSPARENT=true"
          srs="EPSG:3785"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="true"
          legend="%(LEGEND)s"
          mask="%(MASK)s"/>	
""")

nrtWMSLayerTemplate = Template(string="""
        <wmsLayer
          lid="%(LAYER_LID)s"
          visible="false"
          url="%(SERVER_URL)s/%(WRAP_NAME)s?TRANSPARENT=true"
          srs="EPSG:3785"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="true"
          legend="%(LEGEND)s"
          mask="%(MASK)s"/>	
""")
#drought monitor template    
drtWMSLayerTemplate = Template(string="""
        <wmsLayer
          lid="%(LAYER_LID)s"
          visible="false"
          url="%(DRT_URL)s" 
          srs="EPSG:900913"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="false"
          legend="%(SERVER_URL)s/cmapicons/drought-monitor.png"/>""")    
          

def next_alpha(s):
    s = s.lower();
    strip_zs = s.rstrip('z')
    if strip_zs:
        leading_chrs = strip_zs[:-1]
        last_chr = strip_zs[-1]
        new_chr = chr((ord(last_chr) + 1))
        # if the last characters are 'z's then you need to append that many 'a's to the string                        
        trailing_a_chrs = 'a' * (len(s) - len(strip_zs))

        new_string = leading_chrs + new_chr + trailing_a_chrs
        return new_string.upper()
    else:
        return ('a' * (len(s) + 1)).upper()

def getLID(layerName, csvName):
    file_lids = getProcessedLids(csvName)
    lids_list = file_lids['lids_list']
    lyrs_dict = file_lids['lyrs_dict']

    layerName = layerName.rstrip()
    if layerName in lyrs_dict:
        nlid = lyrs_dict[layerName]
    else: #this is new one, iterate and add to file
        highest_lid = max(lids_list)
        nlid = next_alpha(highest_lid)

        lyrs_dict[layerName] = nlid
        lids_list.append(nlid)
        
        f = open(csvName, "a");
        f.write(layerName+ "," + nlid + "\n")
        f.close()
    return nlid

def getProcessedLids(csvName):
    if csvName in processed_lids:
        return processed_lids[csvName]

    lids_list = []
    lyrs_dict = dict()

    f = open(csvName, "r");
    for line in f:
        sp = line.split(',')
        lid = sp[1].upper().rstrip()
        lyrs_dict[sp[0]] = lid
        lids_list.append(lid)
    f.close();

    file_lids = {
        'lyrs_dict': lyrs_dict,
        'lids_list': lids_list
    }

    processed_lids[csvName] = file_lids
    return file_lids

def getDRTLayers():
    #automating the drought monitor layers
    #note: leave a blank space at the botton of the csv to start
    drtList  = []
    #startDate = "100105" #year-month-day
    startDate = "000104" #year-month-day
    today = datetime.today();
    #print today.strftime('%y%m%d');
    #Loop through dates starting w/ startDate
    #until within 8 days of current date
    loopDate = datetime.strptime(startDate,'%y%m%d');
    #print "Starting loopDate: " + loopDate.strftime('%y%m%d');
    #print "today - timedelta(days=7): " + (today - timedelta(days=7)).strftime('%y%m%d');
    while (today > loopDate):
       #print 'The loopDate is ' + loopDate.strftime('%y%m%d')
       lid = getLID("usdm"+loopDate.strftime('%y%m%d'), DRT_LIDFILE_PATH)
       drtURL = "http://torka.unl.edu:8080/cgi-bin/mapserv.exe?map=/ms4w/apps/dm/service/usdm"+loopDate.strftime('%y%m%d')+"_wms.map&amp;TRANSPARENT=true"
       drtList.append({ 'LAYER_LID'       : lid,
                        'LAYER_NAME'      : "usdm"+loopDate.strftime('%y%m%d'),
                        'LAYER_TITLE'     : loopDate.strftime('%m/%d/%Y'),
                        'SERVER_URL'      : SERVER_URL,
                        'DRT_URL'         : drtURL
       })
       loopDate = loopDate + timedelta(days=7)
    #print 'Final loopDate was: ' + loopDate.strftime('%y%m%d')
    drtList.reverse() #reverse the list so that newest dates are on top always
    layers = ""
    for drtDict in drtList:
        layers = layers + drtWMSLayerTemplate.render(drtDict)    
    return layers                 
          
def getNRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=False):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            layerTitle = tif
            lid = getLID(layerName, NRT_LIDFILE_PATH)
            if legendBool:
                legend = getLegend(layerName)
            else:
		legend = ""
            if groupName == "EFETAC-NASA_TC":
                layerTitle = "True Color " + layerName[-11:]
            else:
                layerTitle = layerName[-8:]
            if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                if maskBool:
                    tifList.append({ 'LAYER_LID'    : lid,
                                     'WRAP_NAME'    : wrapName,
                                     'LAYER_NAME'   : layerName,
                                     'LAYER_TITLE'  : layerTitle,
                                     'SERVER_URL'   : SERVER_URL,
                                     'LEGEND'       : SERVER_URL+"/"+legend,
                                     'MASK'         : 'true'
                                     })
                else:  #no mask necessary for this one                      
                    tifList.append({ 'LAYER_LID'    : lid,
                                     'WRAP_NAME'    : wrapName,
                                     'LAYER_NAME'   : layerName,
                                     'LAYER_TITLE'  : layerTitle,
                                     'SERVER_URL'   : SERVER_URL,
                                     'LEGEND'       : SERVER_URL+"/"+legend,
                                     'MASK'         : 'false'
                                     })
            layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers
def get2016NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2016', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2015NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2015', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2014NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2014', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2013NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2013', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2012NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2012', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2011NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2011', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2010NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2010', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2009NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2009', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2008NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2008', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2007NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2007', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

def get2006NRTLayers(dataDir, groupName, wrapName, legendBool, fileExt, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=True):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if re.match(r'2006', nameform):
                 layerTitle = tif
                 lid = getLID(layerName, NRT_LIDFILE_PATH)
                 if legendBool:
                     legend = getLegend(layerName)
                 else:
		     legend = ""
                 if groupName == "EFETAC-NASA_TC":
                     layerTitle = "True Color " + layerName[-11:]
                 else:
                     layerTitle = layerName[-8:]
                 if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                     if maskBool:
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'true'
                                          })
                     else:  #no mask necessary for this one                      
                         tifList.append({ 'LAYER_LID'    : lid,
                                          'WRAP_NAME'    : wrapName,
                                          'LAYER_NAME'   : layerName,
                                          'LAYER_TITLE'  : layerTitle,
                                          'SERVER_URL'   : SERVER_URL,
                                          'LEGEND'       : SERVER_URL+"/"+legend,
                                          'MASK'         : 'false'
                                          })
                 layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
        layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers	

###
### Beginning of run-time code *******************************************************************************
###

if not os.path.exists(NRT_LIDFILE_PATH):
    print "Can't read required NRT LID file '%s'.  Aborting." % (NRT_LIDFILE_PATH)
    exit(-1)

if not os.path.exists(DRT_LIDFILE_PATH):
    print "Can't read required DRT LID file '%s'.  Aborting." % (DRT_LIDFILE_PATH)
    exit(-1)
        
###
### Populate 'layerTitles' dict by reading contents from "layerTitles.txt" file:
###
try:
    f = open("layerTitles.txt", "r")
    layerTitles = {}
    for line in f:
        fields = re.split(r':', line.strip())
        layerTitles[fields[0]] = re.sub(r'^.*/([^/]+)$', '\\1', fields[1])
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("january", "jan")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("febuary", "feb")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("march", "mar")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("april", "apr")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("may", "may")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("june", "jun")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("july", "jul")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("august", "aug")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("september", "sep")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("october", "oct")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("november", "nov")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("december", "dec")
    f.close()
except:
    print "Can't read file layerTitles.txt; you must run 'makemap' before running this script!"
    sys.exit(-1)

tacsModisChangeDetectionProductLayers = ""
for subgroup in [
    { 'label' : '   From Prior Year',
      'layers' : [
            { 'name' : ''+choose("EFETAC-NASA_X_LC_1YEAR_current", "EFETAC-NASA_1YrBaseline_current")+'',       'lid' : 'AD',  'visible' : 'true' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_1YEAR_previous1", "EFETAC-NASA_1YrBaseline_previous1")+'',   'lid' : 'AE',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_1YEAR_previous2", "EFETAC-NASA_1YrBaseline_previous2")+'',   'lid' : 'AF',  'visible' : 'false' } ] },
    { 'label' : '   From All-Year Max',
      'layers' : [
            { 'name' : ''+choose("EFETAC-NASA_X_LC_ALLYEAR_current", "EFETAC-NASA_current")+'',      'lid' : 'AA',  'visible' : 'false'  },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_ALLYEAR_previous1", "EFETAC-NASA_previous1")+'',  'lid' : 'AB',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_ALLYEAR_previous2", "EFETAC-NASA_previous2")+'',  'lid' : 'AC',  'visible' : 'false' } ] },
    { 'label' : '   From Prior 3-Year Max',
      'layers' : [
            { 'name' : ''+choose("EFETAC-NASA_X_LC_3YEAR_current", "EFETAC-NASA_3YrBaseline_current")+'',       'lid' : 'AG',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_3YEAR_previous1", "EFETAC-NASA_3YrBaseline_previous1")+'',   'lid' : 'AH',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_3YEAR_previous2", "EFETAC-NASA_3YrBaseline_previous2")+'',   'lid' : 'AI',  'visible' : 'false' } ] },
	{ 'label' : '   From Prior 5-Year Max',
      'layers' : [
            { 'name' : ''+choose("EFETAC-NASA_X_LC_5YEAR_current", "EFETAC-NASA_5YrBaseline_current")+'',       'lid' : 'FVYRA',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_5YEAR_previous1", "EFETAC-NASA_5YrBaseline_previous1")+'',   'lid' : 'FVYRB',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_5YEAR_previous2", "EFETAC-NASA_5YrBaseline_previous2")+'',   'lid' : 'FVYRC',  'visible' : 'false' } ] },
    { 'label' : '   Early Detect (From Prior Year)',
      'layers' : [
            { 'name' : ''+choose("EFETAC-NASA_X_LC_ALC_1YR_current", "EFETAC-NASA_ALC1YR_current")+'',       'lid' : 'ALCAA',  'visible' : 'false' },
			{ 'name' : ''+choose("EFETAC-NASA_X_LC_ALC_1YR_previous1", "EFETAC-NASA_ALC1YR_previous1")+'',   'lid' : 'ALCAB',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_ALC_1YR_previous2", "EFETAC-NASA_ALC1YR_previous2")+'',   'lid' : 'ALCAC',  'visible' : 'false' } ] },		
	{ 'label' : '   From All-Year Phenotype Max',
      'layers' : [
            { 'name' : ''+choose("EFETAC-NASA_X_LC_MUC_ALL_YR_current", "EFETAC-NASA_MUCAllYear_current")+'',       'lid' : 'MUCAA',  'visible' : 'false' },
			{ 'name' : ''+choose("EFETAC-NASA_X_LC_MUC_ALL_YR_previous1", "EFETAC-NASA_MUCAllYear_previous1")+'',   'lid' : 'MUCAB',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_MUC_ALL_YR_previous2", "EFETAC-NASA_MUCAllYear_previous2")+'',   'lid' : 'MUCAC',  'visible' : 'false' } ] },			
	{ 'label' : '   From All-Year Mean (of Maxes)',
      'layers' : [
            { 'name' : ''+choose("EFETAC-NASA_X_LC_MMAX_ALL_YR_current", "EFETAC-NASA_MoMAllYear_current")+'',       'lid' : 'MoMAA',  'visible' : 'false' },
			{ 'name' : ''+choose("EFETAC-NASA_X_LC_MMAX_ALL_YR_previous1", "EFETAC-NASA_MoMAllYear_previous1")+'',   'lid' : 'MoMAB',  'visible' : 'false' },
            { 'name' : ''+choose("EFETAC-NASA_X_LC_MMAX_ALL_YR_previous2", "EFETAC-NASA_MoMAllYear_previous2")+'',   'lid' : 'MoMAC',  'visible' : 'false' } ] }			
    ]:
    tacsModisChangeDetectionProductLayers = ( tacsModisChangeDetectionProductLayers +
        '      <wmsSubgroup label="' + subgroup['label'] + '">\n' )
    for layer in subgroup['layers']:
		#print layer['lid']
		tacsModisChangeDetectionProductLayers = tacsModisChangeDetectionProductLayers + wmsLayerTemplate.render({
                'SELECTED'      : ("selected=\"true\"\n          " if (layer['name']==''+choose("EFETAC-NASA_X_LC_1YEAR_current", "EFETAC-NASA_1YrBaseline_current")+'') else ""),
                'SERVER_URL'    : SERVER_URL,
                'LAYER_LID'     : layer['lid'],
                'LAYER_NAME'    : layer['name'],
                'LEGEND'        : SERVER_URL+'/'+getLegend(layer['name']),
                'LAYER_VISIBLE' : layer['visible'],
                'LAYER_TITLE'   : layerTitles[layer['name']],
                'MASK'          : 'true'
                })
    tacsModisChangeDetectionProductLayers = tacsModisChangeDetectionProductLayers + "      </wmsSubgroup>\n"

rsacModisChangeDetectionProductLayers = ""

for subgroup in [    
    { 'label' : '   From Prior 3-Year Max',
      'layers' : [
            { 'name' : 'RSAC-FHTET_current',                    'lid' : 'AM',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_previous1',                  'lid' : 'AN',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_previous2',                  'lid' : 'AP',  'visible' : 'false' } ] }
			# { 'label' : '   Change from 5-Year Baseline',
      # 'layers' : [
            # { 'name' : 'RSAC-FHTET_5YrBaseline_current',        'lid' : 'AQ',  'visible' : 'false' },
            # { 'name' : 'RSAC-FHTET_5YrBaseline_previous1',      'lid' : 'AR',  'visible' : 'false' },
            # { 'name' : 'RSAC-FHTET_5YrBaseline_previous2',      'lid' : 'AS',  'visible' : 'false' } ] }
    ]:
    rsacModisChangeDetectionProductLayers = ( rsacModisChangeDetectionProductLayers +
        '      <wmsSubgroup label="' + subgroup['label'] + '">\n' )
    for layer in subgroup['layers']:
        rsacModisChangeDetectionProductLayers = rsacModisChangeDetectionProductLayers + wmsLayerTemplate.render({
                'SELECTED'      : "",
                'SERVER_URL'    : SERVER_URL,
                'LAYER_LID'     : layer['lid'],
                'LAYER_NAME'    : layer['name'],
                'LEGEND'        : SERVER_URL+'/'+getLegend(layer['name']),
                'LAYER_VISIBLE' : layer['visible'],
                'LAYER_TITLE'   : layerTitles[layer['name']],
                'MASK'   : ''
                })
    rsacModisChangeDetectionProductLayers = rsacModisChangeDetectionProductLayers + "      </wmsSubgroup>\n"

template = Template("ews_config.tpl.xml")

if not os.path.exists("../html/view/config"):
    os.makedirs("../html/view/config")

nrtTCProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/TrueColorData", "EFETAC-NASA_TC", "ewstruecolor", False, ".img", False)
nrt1YrProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt3YrProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt5YrProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_5YEAR", "5Year"), "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrtAllYrProductLayers = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
#jdm 5/31: new nrt products
#added additional param to getNRTLayers() to account for masking
nrtALC1Yr = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrtMUCAllYr = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrtMMAXAllYr = getNRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
#get products by year
nrt20161YrProductLayers = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20151YrProductLayers = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20141YrProductLayers = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20131YrProductLayers = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20121YrProductLayers = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20111YrProductLayers = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20101YrProductLayers = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20091YrProductLayers = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20081YrProductLayers = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20071YrProductLayers = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20061YrProductLayers = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "EFETAC-NASA_1Year", "dyna_ews", True, ".tif", True)
nrt20163YrProductLayers = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20153YrProductLayers = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20143YrProductLayers = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20133YrProductLayers = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20123YrProductLayers = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20113YrProductLayers = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20103YrProductLayers = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20093YrProductLayers = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20083YrProductLayers = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20073YrProductLayers = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20063YrProductLayers = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year"), "EFETAC-NASA_3Year", "dyna_ews", True, ".tif", True)
nrt20165YrProductLayers = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20155YrProductLayers = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20145YrProductLayers = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20135YrProductLayers = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20125YrProductLayers = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20115YrProductLayers = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20105YrProductLayers = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20095YrProductLayers = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20085YrProductLayers = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20075YrProductLayers = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt20065YrProductLayers = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_5YEAR", "EFETAC-NASA_5Year", "dyna_ews", True, ".tif", True)
nrt2016AllYrProductLayers = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2015AllYrProductLayers = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2014AllYrProductLayers = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2013AllYrProductLayers = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2012AllYrProductLayers = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2011AllYrProductLayers = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2010AllYrProductLayers = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2009AllYrProductLayers = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2008AllYrProductLayers = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2007AllYrProductLayers = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2006AllYrProductLayers = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear"), "EFETAC-NASA", "dyna_ews", True, ".tif", True)
nrt2016ALC1Yr = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2015ALC1Yr = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2014ALC1Yr = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2013ALC1Yr = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2012ALC1Yr = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2011ALC1Yr = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2010ALC1Yr = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2009ALC1Yr = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2008ALC1Yr = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2007ALC1Yr = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2006ALC1Yr = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR"), "EFETAC-NASA_ALC1YR", "dyna_ews", True, ".tif", True)
nrt2016MUCAllYr = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2015MUCAllYr = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2014MUCAllYr = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2013MUCAllYr = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2012MUCAllYr = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2011MUCAllYr = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2010MUCAllYr = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2009MUCAllYr = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2008MUCAllYr = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2007MUCAllYr = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2006MUCAllYr = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR"), "EFETAC-NASA_MUCAllYear", "dyna_ews", True, ".tif", True)
nrt2016MMAXAllYr = get2016NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2015MMAXAllYr = get2015NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2014MMAXAllYr = get2014NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2013MMAXAllYr = get2013NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2012MMAXAllYr = get2012NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_MMAX_ALL_YR", "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2011MMAXAllYr = get2011NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_MMAX_ALL_YR", "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2010MMAXAllYr = get2010NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+"X_LC_MMAX_ALL_YR", "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2009MMAXAllYr = get2009NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2008MMAXAllYr = get2008NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2007MMAXAllYr = get2007NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)
nrt2006MMAXAllYr = get2006NRTLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR"), "EFETAC-NASA_MoMAllYear", "dyna_ews", True, ".tif", True)

drtLayers = getDRTLayers()
#End NRT 8 day & drought monitor automation-------------------------------------------------

f = open("../html/view/config/ews_config.xml", "w")
fMin = open("../html/view/config/ews_config_min.xml", "w+")

configXML = template.render( {
            'SERVER_URL'                            : SERVER_URL,
            'VIEWER_DEPLOY_DIR_URL'                 : VIEWER_DEPLOY_DIR_URL,
            'TACS_MODIS_CHANGE_DETECTION_PRODUCT_LAYERS' : tacsModisChangeDetectionProductLayers,
            'RSAC_MODIS_CHANGE_DETECTION_PRODUCT_LAYERS' : rsacModisChangeDetectionProductLayers,
            'NRT_MODISCloud__LAYERS'  : nrtTCProductLayers,
            'NRT_1YEAR_LAYERS'        : nrt1YrProductLayers,
            'NRT_3YEAR_LAYERS'        : nrt3YrProductLayers,
            'NRT_5YEAR_LAYERS'        : nrt5YrProductLayers,
            'NRT_AllYEAR_LAYERS'      : nrtAllYrProductLayers,
            'NRT_ALC1YR_LAYERS'       : nrtALC1Yr,
            'NRT_MUCALLYR_LAYERS'     : nrtMUCAllYr,
            'NRT_MMAXYR_LAYERS'       : nrtMMAXAllYr,
            'NRT_2016_1YEAR_LAYERS'        : nrt20161YrProductLayers,
            'NRT_2015_1YEAR_LAYERS'        : nrt20151YrProductLayers,
            'NRT_2014_1YEAR_LAYERS'        : nrt20141YrProductLayers,
            'NRT_2013_1YEAR_LAYERS'        : nrt20131YrProductLayers,
            'NRT_2012_1YEAR_LAYERS'        : nrt20121YrProductLayers,
            'NRT_2011_1YEAR_LAYERS'        : nrt20111YrProductLayers,
            'NRT_2010_1YEAR_LAYERS'        : nrt20101YrProductLayers,
            'NRT_2009_1YEAR_LAYERS'        : nrt20091YrProductLayers,
            'NRT_2008_1YEAR_LAYERS'        : nrt20081YrProductLayers,
            'NRT_2007_1YEAR_LAYERS'        : nrt20071YrProductLayers,
            'NRT_2006_1YEAR_LAYERS'        : nrt20061YrProductLayers,
            'NRT_2016_3YEAR_LAYERS'        : nrt20163YrProductLayers,
            'NRT_2015_3YEAR_LAYERS'        : nrt20153YrProductLayers,
            'NRT_2014_3YEAR_LAYERS'        : nrt20143YrProductLayers,
            'NRT_2013_3YEAR_LAYERS'        : nrt20133YrProductLayers,
            'NRT_2012_3YEAR_LAYERS'        : nrt20123YrProductLayers,
            'NRT_2011_3YEAR_LAYERS'        : nrt20113YrProductLayers,
            'NRT_2010_3YEAR_LAYERS'        : nrt20103YrProductLayers,
            'NRT_2009_3YEAR_LAYERS'        : nrt20093YrProductLayers,
            'NRT_2008_3YEAR_LAYERS'        : nrt20083YrProductLayers,
            'NRT_2007_3YEAR_LAYERS'        : nrt20073YrProductLayers,
            'NRT_2006_3YEAR_LAYERS'        : nrt20063YrProductLayers,
            'NRT_2016_5YEAR_LAYERS'        : nrt20165YrProductLayers,
            'NRT_2015_5YEAR_LAYERS'        : nrt20155YrProductLayers,
            'NRT_2014_5YEAR_LAYERS'        : nrt20145YrProductLayers,
            'NRT_2013_5YEAR_LAYERS'        : nrt20135YrProductLayers,
            'NRT_2012_5YEAR_LAYERS'        : nrt20125YrProductLayers,
            'NRT_2011_5YEAR_LAYERS'        : nrt20115YrProductLayers,
            'NRT_2010_5YEAR_LAYERS'        : nrt20105YrProductLayers,
            'NRT_2009_5YEAR_LAYERS'        : nrt20095YrProductLayers,
            'NRT_2008_5YEAR_LAYERS'        : nrt20085YrProductLayers,
            'NRT_2007_5YEAR_LAYERS'        : nrt20075YrProductLayers,
            'NRT_2006_5YEAR_LAYERS'        : nrt20065YrProductLayers,
            'NRT_2016_AllYEAR_LAYERS'      : nrt2016AllYrProductLayers,
            'NRT_2015_AllYEAR_LAYERS'      : nrt2015AllYrProductLayers,
            'NRT_2014_AllYEAR_LAYERS'      : nrt2014AllYrProductLayers,
            'NRT_2013_AllYEAR_LAYERS'      : nrt2013AllYrProductLayers,
            'NRT_2012_AllYEAR_LAYERS'      : nrt2012AllYrProductLayers,
            'NRT_2011_AllYEAR_LAYERS'      : nrt2011AllYrProductLayers,
            'NRT_2010_AllYEAR_LAYERS'      : nrt2010AllYrProductLayers,
            'NRT_2009_AllYEAR_LAYERS'      : nrt2009AllYrProductLayers,
            'NRT_2008_AllYEAR_LAYERS'      : nrt2008AllYrProductLayers,
            'NRT_2007_AllYEAR_LAYERS'      : nrt2007AllYrProductLayers,
            'NRT_2006_AllYEAR_LAYERS'      : nrt2006AllYrProductLayers,
            'NRT_2016_ALC1YR_LAYERS'       : nrt2016ALC1Yr,
            'NRT_2015_ALC1YR_LAYERS'       : nrt2015ALC1Yr,
            'NRT_2014_ALC1YR_LAYERS'       : nrt2014ALC1Yr,
            'NRT_2013_ALC1YR_LAYERS'       : nrt2013ALC1Yr,
            'NRT_2012_ALC1YR_LAYERS'       : nrt2012ALC1Yr,
            'NRT_2011_ALC1YR_LAYERS'       : nrt2011ALC1Yr,
            'NRT_2010_ALC1YR_LAYERS'       : nrt2010ALC1Yr,
            'NRT_2009_ALC1YR_LAYERS'       : nrt2009ALC1Yr,
            'NRT_2008_ALC1YR_LAYERS'       : nrt2008ALC1Yr,
            'NRT_2007_ALC1YR_LAYERS'       : nrt2007ALC1Yr,
            'NRT_2006_ALC1YR_LAYERS'       : nrt2006ALC1Yr,
			'NRT_2016_MUCALLYR_LAYERS'     : nrt2016MUCAllYr,
            'NRT_2015_MUCALLYR_LAYERS'     : nrt2015MUCAllYr,
            'NRT_2014_MUCALLYR_LAYERS'     : nrt2014MUCAllYr,
            'NRT_2013_MUCALLYR_LAYERS'     : nrt2013MUCAllYr,
            'NRT_2012_MUCALLYR_LAYERS'     : nrt2012MUCAllYr,
            'NRT_2011_MUCALLYR_LAYERS'     : nrt2011MUCAllYr,
            'NRT_2010_MUCALLYR_LAYERS'     : nrt2010MUCAllYr,
            'NRT_2009_MUCALLYR_LAYERS'     : nrt2009MUCAllYr,
            'NRT_2008_MUCALLYR_LAYERS'     : nrt2008MUCAllYr,
            'NRT_2007_MUCALLYR_LAYERS'     : nrt2007MUCAllYr,
            'NRT_2006_MUCALLYR_LAYERS'     : nrt2006MUCAllYr,
            'NRT_2016_MMAXYR_LAYERS'       : nrt2016MMAXAllYr,
            'NRT_2015_MMAXYR_LAYERS'       : nrt2015MMAXAllYr,
            'NRT_2014_MMAXYR_LAYERS'       : nrt2014MMAXAllYr,
            'NRT_2013_MMAXYR_LAYERS'       : nrt2013MMAXAllYr,
            'NRT_2012_MMAXYR_LAYERS'       : nrt2012MMAXAllYr,
            'NRT_2011_MMAXYR_LAYERS'       : nrt2011MMAXAllYr,
            'NRT_2010_MMAXYR_LAYERS'       : nrt2010MMAXAllYr,
            'NRT_2009_MMAXYR_LAYERS'       : nrt2009MMAXAllYr,
            'NRT_2008_MMAXYR_LAYERS'       : nrt2008MMAXAllYr,
            'NRT_2007_MMAXYR_LAYERS'       : nrt2007MMAXAllYr,
            'NRT_2006_MMAXYR_LAYERS'       : nrt2006MMAXAllYr,
            'DRT_LAYERS'      : drtLayers
            })

minXML = parseString(configXML).toprettyxml('', '', 'UTF-8')
minXML = minXML.splitlines()
minXML = map(str.strip, minXML)
minXML = ''.join(minXML)

f.write(configXML)
fMin.write(minXML)

f.close()
fMin.close()

if not os.path.exists("../html/cmapicons"):
    os.makedirs("../html/cmapicons")

os.system("cp -r cmapicons/* ../html/cmapicons")
#os.system("cp /var/fswms.nemac.org/html/view/config/ews_config.xml /var/ol-fcav/config/ews_config.xml")
