#! /usr/bin/python

import os, re, sys, getopt
from datetime import datetime, date, timedelta
sys.path.append("../var")

try:
    from Config import *
except:
    print "Cannot find local settings file 'etc/Config.py'.  You need to create a Config.py file that contains"
    print "settings appropriate for this copy of the FSWMS project.  You can use the file 'Config.tpl.py'"
    print "as a starting point --- make a copy of that file called 'Config.py', and edit appropriately."
    exit(-1)

curprev_prefix = ["current", "previous1", "previous2"]

opts, args = getopt.getopt(sys.argv[1:],
                           "D:al",
                           ["dryrun"]
                           )

dryrun = False
use_all_lands = False
for opt, arg in opts:
	if opt in ('-D', '--dryrun'):
		dryrun = True
	elif opt in ("-al"):
		use_all_lands = True
		print "Using All-Lands"


def choose(al,fo):
    if use_all_lands:
		return al
    else:
		print "Using Forest-Only"
		return fo

linkgroups = [
#    {
#        'srcdir'             : directory to look in (recursively) for data files 
#        'regex'              : regular expression pattern of files to create links for
#        'filter_functions'   : list of filter functions for reducing the list of files to create links for;
#                               each of the functions in this list should take a list argument and return a list
#        'dstdir'             : destination directory for symlinks
#        'linkname_generator' : function(i,f,m) for generating link name; i = 0-based number of file in list,
#                               f = filename, m = re match object for filename f matching regex
#        'reps'               : "repititions" --- list of patterns and replacements to use when repeating symlink creation
#    },

## FOR FDM PICKUP
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_3yr\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(LINK_TARGET_DIR, "rsac_fhtet"),
        'linkname_generator' : lambda i,f,m: "%s_%s_3yr.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },

    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_5yr\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(LINK_TARGET_DIR, "rsac_fhtet"),
        'linkname_generator' : lambda i,f,m: "%s_%s_5yr.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_3yr_bd\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(LINK_TARGET_DIR, "rsac_fhtet"),
        'linkname_generator' : lambda i,f,m: "%s_%s_3yr_bd.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_5yr_bd\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(LINK_TARGET_DIR, "rsac_fhtet"),
        'linkname_generator' : lambda i,f,m: "%s_%s_5yr_bd.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },

############### EFETAC NASA
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/3Year"),
        'regex'              : r'/(\d{8})_(\d{2})_(\d{4})_max\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(LINK_TARGET_DIR, "efetac_nasa"),
        'linkname_generator' : lambda i,f,m: "%s_%s_3yr.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/3Year"),
        'regex'              : r'/(\d{8})_(\d{2})_(\d{4})_max_bd\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(LINK_TARGET_DIR, "efetac_nasa"),
        'linkname_generator' : lambda i,f,m: "%s_%s_3yr_bd.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },

    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/5Year"),
        'regex'              : r'/(\d{8})_(\d{2})_(\d{4})_max\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(LINK_TARGET_DIR, "efetac_nasa"),
        'linkname_generator' : lambda i,f,m: "%s_%s_5yr.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },

    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/5Year"),
        'regex'              : r'/(\d{8})_(\d{2})_(\d{4})_max_bd\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(LINK_TARGET_DIR, "efetac_nasa"),
        'linkname_generator' : lambda i,f,m: "%s_%s_5yr_bd.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },

##  FOR VIEWER
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_3yr\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "rsac_fhtet"),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },

    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_3yr\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "rsac_fhtet-retro/3YrBaseline"),
        'linkname_generator' : lambda i,f,m: "%s_%s_3yr.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_5yr\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "rsac_fhtet-retro/5YrBaseline"),
        'linkname_generator' : lambda i,f,m: "%s_%s_5yr.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_3yr_bd\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "rsac_fhtet-retro/3YrBaselineBD"),
        'linkname_generator' : lambda i,f,m: "%s_%s_3yr_bd.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/rsac_fhtet/ews"),
        'regex'              : r'/ews/(\d{8})_(\d{2})_5yr_bd\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "rsac_fhtet-retro/5YrBaselineBD"),
        'linkname_generator' : lambda i,f,m: "%s_%s_5yr_bd.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },

    {
        # /flood/fsdata/efetac_nasa/AllYear/20110601_24_2003_max.tfw
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/AllYear"),
        'regex'              : r'/AllYear/(\d{8})_(\d{2})_\d{4}_max\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "efetac_nasa"),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },

    {
        # /flood/fsdata/efetac_nasa/AllYear/20110601_24_2003_max.tfw
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear")),
        'regex'              : r'/'+choose("X_LC_ALLYEAR", "AllYear")+'/(\d{8})_(\d{2})_\d{4}'+choose("_max_lc", "_max")+'\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "efetac_nasa-retro/"+choose("X_LC_ALLYEAR", "AllYrBaseline")+""),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        # /flood/fsdata/efetac_nasa/1Year/20110601_24_2010_max.tfw
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year")),
        'regex'              : r'/'+choose("X_LC_1YEAR", "1Year")+'/(\d{8})_(\d{2})_\d{4}'+choose("_max_lc", "_max")+'\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "efetac_nasa-retro/"+choose("X_LC_1YEAR", "1YrBaseline")+""),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        # /flood/fsdata/efetac_nasa/3Year/20110601_24_2010_max.tfw
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/"+choose("X_LC_3YEAR", "3Year")),
        'regex'              : r'/'+choose("X_LC_3YEAR", "3Year")+'/(\d{8})_(\d{2})_\d{4}'+choose("_max_lc", "_max")+'\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "efetac_nasa-retro/"+choose("X_LC_3YEAR", "3YrBaseline")+""),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
	## MWH: 5/28/2015 new NRT 5 year product for EFETAC NASA
	{
        # /flood/fsdata/efetac_nasa/3Year/20110601_24_2010_max.tfw
        'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/"+choose("X_LC_5YEAR", "5Year")),
        'regex'              : r'/'+choose("X_LC_5YEAR", "5Year")+'/(\d{8})_(\d{2})_\d{4}'+choose("_max_lc", "_max")+'\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "efetac_nasa-retro/"+choose("X_LC_5YEAR", "5YrBaseline")+""),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
	##	JDM: 4/24/13 new NRT products for EFETAC NASA	
    {
        # /flood/fsdata/efetac_nasa/X_ALC_1YR/20130414_24_alc_1yr.tif
		'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/"+choose("X_LC_ALC_1YR", "X_ALC_1YR")), 
        'regex'              : r'/'+choose("X_LC_ALC_1YR", "X_ALC_1YR")+'/(\d{8})_(\d{2})'+choose("_alc_land_1yr", "_alc_1yr")+'\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "efetac_nasa-retro/"+choose("X_LC_ALC_1YR", "ALC1YR")+""),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },	
    {
        # /flood/fsdata/efetac_nasa/X_MUC_ALL_YR/20130422_24_muc_ayr.tif
		'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/"+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR")), 
        'regex'              : r'/'+choose("X_LC_MUC_ALL_YR", "X_MUC_ALL_YR")+'/(\d{8})_(\d{2})'+choose("_muc_ayr_lc", "_muc_ayr")+'\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "efetac_nasa-retro/"+choose("X_LC_MUC_ALL_YR", "MUCAllYear")+""),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    },
    {
        # /flood/fsdata/efetac_nasa/X_MMAX_ALL_YR/20130414_24_mmax_ayr.tif
		'srcdir'             : os.path.join(DATA_DIR, "fsdata/efetac_nasa/"+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR")), 
        'regex'              : r'/'+choose("X_LC_MMAX_ALL_YR", "X_MMAX_ALL_YR")+'/(\d{8})_(\d{2})'+choose("_mmax_ayr_lc", "_mmax_ayr")+'\.tif$',
        'filter_functions'   : [
            lambda list : sorted(list),
            lambda list : list[-3:][::-1]
            ],
        'dstdir'             : os.path.join(VIEWER_LINK_TARGET_DIR, "efetac_nasa-retro/"+choose("X_LC_MMAX_ALL_YR", "MoMAllYear")+""),
        'linkname_generator' : lambda i,f,m: "%s_%s.tif" % (curprev_prefix[i], date_period_longform(m.group(1),int(m.group(2)))),
        'reps'               : [ { 'pattern' : r'\.tif$', 'replacement' : '.tfw' } ]
    }		
]

def date_period_longform(YYYYMMDD, PP):
    """Return a string of the form "monthaN_monthbM" from YYYYMMDD and PP (period length) values.

    This function takes two parameters, YYYYMMDD, which should be an
    (exactly) 8-character string representing a year-day-month value,
    and PP, which should be an int given a period length.  Returns a
    string of the form "monthaN_monthbM", where montha and monthb are
    month names spelled out in their long form, all in lowercase
    letters, and N and M are 1 or 2 digit dates in those months.  The
    monthbM part will correspond to the month (MM) and day (DD) part
    of the input parameter YYYYMMDD, and the monthaN part will
    correspond to a date that is PP days earlier.  For example:

          period_longform("20110710",  5) ==> "july6_july10"
          period_longform("20100305", 24) ==> "february10_march5"
    """
    endyear   = int(YYYYMMDD[0:4])
    endmonth  = int(YYYYMMDD[4:6])
    endday    = int(YYYYMMDD[6:8])
    enddate   = date(endyear, endmonth, endday)
    startdate = enddate - timedelta(PP-1)
    monthbM   = enddate.strftime("%B").lower() + ("%1d" % (int(enddate.strftime("%d"))))
    monthaN   = startdate.strftime("%B").lower() + ("%1d" % (int(startdate.strftime("%d"))))
    return "%s_%s" % (monthaN, monthbM)

def listfiles(DIR):
    """Return a list of all the files in a directory tree.

    Recurse through DIR and all its subdirectories to find all the
    plain files (not directories, not symlinks, etc), and return their
    names (as strings) in a list.
    """
    files = []
    for item in os.listdir(DIR):
        relitem = os.path.join(DIR,item)
        if os.path.isdir(relitem):
            files.extend(listfiles(relitem))
        else:
            files.append(relitem)
    return files


def makedirs(dir):
    if (dryrun):
        print "makedirs(%s)" % dir
    else:
        os.makedirs(dir)

def remove(dir):
    if (dryrun):
        print "remove(%s)" % dir
    else:
        os.remove(dir)

def symlink(src,dst):
    if (dryrun):
        print "symlink(%s,%s)" % (src,dst)
    else:
        os.symlink(src,dst)


#
# Initialize the destination directories --- make sure each one exists, and clear
# out any existing symlinks it contains
#
for linkgroup in linkgroups:
    #
    # make sure the link destination directory exists
    #
    if not os.path.exists(linkgroup['dstdir']):
        makedirs(linkgroup['dstdir'])
    # print linkgroup['dstdir']
    # print linkgroup['regex']
    # print linkgroup['srcdir']
    #
    # remove any existing symlinks from the destination directory
    #
    for link in os.listdir(linkgroup['dstdir']):
        linkpath = os.path.join(linkgroup['dstdir'], link)
        if os.path.islink(linkpath):
            remove(linkpath)




#
# Now we do the work:
#
for linkgroup in linkgroups:

    #
    # initialize the list of files to those in the source directory matching the given regex
    #
    files = [f for f in listfiles(linkgroup['srcdir']) if re.search(linkgroup['regex'],f)]

    #
    # apply all filter functions, in order, to the list of files
    #
    for filter in linkgroup['filter_functions']:
        files = filter(files)

    #
    # for each file remaining in the list...
    #
    for i in range(0,len(files)):

        #
        # generate the name of the symlink for the file
        #
        f = files[i]
        m = re.search(linkgroup['regex'], f)
        dst = linkgroup['linkname_generator'](i,f,m)

        #
        # create the symlink
        #
        dstpath = os.path.join(linkgroup['dstdir'], dst)
        symlink(f,dstpath)

        #
        # and finally, repeat for any 'reps':
        #
        for rep in linkgroup['reps']:
            rf       = re.sub(rep['pattern'], rep['replacement'], f)
            rdstpath = re.sub(rep['pattern'], rep['replacement'], dstpath)
            symlink(rf,rdstpath)
