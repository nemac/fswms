#! /usr/bin/python

### creates the mapfile:
###    {ews.map,ewswgs84.map,ewswcs.map etc...}
### from the template files
###    ews.map.tmpl   - template for whole mapfile
###    ews.layer.tmpl - template for each layer section ### by looping over all tif files found in
###    * LAYER_DATA_DIR
###    * DATA_DIR/fsdata/efetac_nasa/ews
### 
###  * create ews1year.map using template ews1year.tpl.map
###  * create ews3year.map using template ews3year.tpl.map
###  * create ews5year.map using template ews5year.tpl.map
###  * create ewstruecolor.map using template ewstruecolor.tpl.map


###
### imports
###

from osgeo import gdal, osr
from util import *
import sys, os, subprocess, datetime, re, shutil, traceback, getopt

import fw2
import fw3
import duration
import magnitude


opts, args = getopt.getopt(sys.argv[1:],"al")

use_all_lands = False
for opt, arg in opts:
    if opt in ("-al"):
        use_all_lands = True
        print "Using All-Lands"


def choose(al,fo):
    if use_all_lands:
        return al
    else:
        print "Using Forest-Only"
        return fo

###
### config
###

sys.path.append("../var")
try:
    from Config import *
except:
    print "Cannot find local settings file 'Config.py'.  You need to create a Config.py file that contains"
    print "settings appropriate for this copy of the FSWMS project.  You can use the file 'Config.tpl.py'"
    print "as a starting point --- make a copy of that file called 'Config.py', and edit appropriately."
    exit(-1)

class Template:
    def __init__(self, file):
        f = open(file, "r")
        self.contents = ""
        for line in f:
            self.contents = self.contents + line
        f.close
    def render(self, dict):
        return self.contents % dict


# jdm 5/9/13: for each of these go through the ewsMask and create a relavent entry
# these should be read out of an external config file but I have hardcoded for now


mapfilesWritten = []

    
### initialize a dict to keep track of layer titles (keyed by layer name):
###
layerTitles = {}

###
### initialize tiflist: array of dict objects holding info about each layer in mapfile(s)
###
tiflist = []


## Seasonal Summaries (Duration)
duration.make_map()

## Seasonal Summaries (Magnitude)
magnitude.make_map()

## ForWarn 2
fw2.make_mapfiles()

## ForWarn 3
fw3.make_mapfiles() 


###
### add in the gtac fhtet files to be available in an archive format
### these will go in ews.map also but will utilize a diff color map: gtac_fhtet_percent_change_cmap.cmap
###

#Start of attempt to create a generic function to get layers
#At this point its a not completely generic because the color maps is 
#specific to the tif files location
#LAYERS1 = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_1YEAR", "1Year"), "ews_gen.layer.tpl.map", "EFETAC-NASA_1Year", ".tif", "no", True)
def getLayers(dataDir, layerTemplateName, groupName, fileExt, wcs, maskBool, colormapfile=None):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=False):
        dynaList  = []
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            proj = getproj(tif_fullpath)
            modDate = getModDate(tif_fullpath)
            nameform = re.sub(r'^.*/', '', tif)
            #this conditional logic needs to be refactored out
            if colormapfile:
                colormapline = 'INCLUDE %s' % colormapfile
            elif re.search(r'max|med', nameform) and wcs=="no":
                colormapline   = 'INCLUDE "new-forwarn2-standard-2.cmap"'
            elif re.search(r'255c.img', nameform):
                colormapline   = ''
            elif re.search(r'u16b.img', nameform):
                colormapline   = 'INCLUDE "truecolor16b.cmap"'  
            #elif re.search(r'.img', fileExt):
                #colormapline   = ''
            elif(wcs=="yes"):
                colormapline   = ''
            else:
                colormapline   = 'INCLUDE "new-forwarn2-standard-2.cmap"'
            group = groupName
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
                #jdm 1/26 check for the occurace of bd after the last underscore
                #this is the same layer but w/ a slightly diff algorithm on the remote
                #sensing side of things.
                if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
                else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            layerTitle = tif
            groupText = 'GROUP FW_%s_layers' % layerTitle
            tifList.append({ 'TIF'             : tif,
                             'PROJVALID'       : len(proj) > 0,
                             'PROJ'            : formatproj(proj,10),
                             'WKT'             : getwkt(tif_fullpath),
                             'NAME'            : layerName,
                             'GROUP'           : group,
                             'DATA'            : dataDir + '/' + tif,
                             'TITLE'           : layerTitle,
                             'ABSTRACT'        : layerTitle,
                             'COLORMAPLINE'    : colormapline,
                             'MASK'            : '',
			                       'GROUPTEXT'       : groupText
                             })
            dynaList.append({ 'TIF'             : tif,
                             'PROJVALID'       : len(proj) > 0,
                             'PROJ'            : formatproj(proj,10),
                             'WKT'             : getwkt(tif_fullpath),
                             'NAME'            : layerName,
                             'GROUP'           : group,
                             'DATA'            : dataDir + '/' + tif,
                             'TITLE'           : layerTitle,
                             'ABSTRACT'        : layerTitle,
                             'COLORMAPLINE'    : colormapline,
                             'MASK'            : '',
			                       'GROUPTEXT'       : ''
                             })                             
            layerTitles[layerName] = layerTitle
            #jdm 5/29: for layers groups that we want ewsMask on do so     
            if maskBool:
                for mask in ewsMask:
                    tifList.append({ 'TIF'             : tif,
                                     'PROJVALID'       : len(proj) > 0,
                                     'PROJ'            : formatproj(proj,10),
                                     'WKT'             : getwkt(tif_fullpath),
                                     'NAME'            : layerName + mask['name'],
                                     'GROUP'           : group,
                                     'DATA'            : dataDir + '/' + tif,
                                     'TITLE'           : layerTitle + mask['name'],
                                     'ABSTRACT'        : layerTitle + mask['name'],
                                     'COLORMAPLINE'    : colormapline,
                                     'MASK'            : 'MASK ' + mask['name'],
				                             'GROUPTEXT'       : groupText
                                     })    
                    dynaList.append({ 'TIF'             : tif,
                                     'PROJVALID'       : len(proj) > 0,
                                     'PROJ'            : formatproj(proj,10),
                                     'WKT'             : getwkt(tif_fullpath),
                                     'NAME'            : layerName + mask['name'],
                                     'GROUP'           : group,
                                     'DATA'            : dataDir + '/' + tif,
                                     'TITLE'           : layerTitle + mask['name'],
                                     'ABSTRACT'        : layerTitle + mask['name'],
                                     'COLORMAPLINE'    : colormapline,
                                     'MASK'            : 'MASK ' + mask['name'],
 				                             'GROUPTEXT'       : groupText
                                     })                                          
            #Perform layer-level creation of dynamic map files:
            layerTemplate = Template(layerTemplateName)
            layers = ""
            for tifdict in dynaList:
                if tifdict['PROJVALID']:
                    layers = layers + layerTemplate.render(tifdict)    
                    mapTemplate = Template("ews.map.tmpl")
                    SERVICE_NAME = "dyna_ews"
                    f_new_filename = "dyna_maps/"+layerName+".map"
                    f_new = openMapfileForWriting(f_new_filename)
                    mapfilesWritten.append(f_new_filename)
                    f_new.write( mapTemplate.render( {
                                'DATA_DIR'                : DATA_DIR,
                                'LAYERS'                  : layers,
                                'WMS_SRS'                 : "EPSG:3857 EPSG:4326 EPSG:900913",
                                'MAPFILE_PROJECTION'      : '"init=epsg:3857"',
                                'SERVICE_NAME'            : SERVICE_NAME,
                                'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
                                'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
                                'OWS_TITLE'               : "NEMAC %s WMS" % (SERVICE_NAME),
                                'OWS_ABSTRACT'            : "NEMAC %s WMS" % (SERVICE_NAME),
                                'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
                                'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
                                'MS_ERRORFILE'            : "../var/log/%s.log" % (SERVICE_NAME),
                                'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
                                } ) )
                    f_new.close()                    
        except Exception as e:
            print e
            continue
    layerTemplate = Template(layerTemplateName)
    layers = ""
    for tifdict in tifList:
        if tifdict['PROJVALID']:
            layers = layers + layerTemplate.render(tifdict)    
    return layers

def getLayersNoMask(dataDir, layerTemplateName, groupName, fileExt, wcs, maskBool):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=False):
        dynaList  = []
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            proj = getproj(tif_fullpath)
            modDate = getModDate(tif_fullpath)
            nameform = re.sub(r'^.*/', '', tif)
            #this conditional logic needs to be refactored out
            if re.search(r'max|med', nameform) and wcs=="no":
                colormapline   = 'INCLUDE "new-forwarn2-standard-2.cmap"'
            elif re.search(r'255c.img', nameform):
                colormapline   = ''
            elif re.search(r'u16b.img', nameform):
                colormapline   = 'INCLUDE "truecolor16b.cmap"' 
            #elif re.search(r'.img', fileExt):
                #colormapline   = ''
            elif(wcs=="yes"):
                colormapline   = ''
            else:
                colormapline   = 'INCLUDE "new-forwarn2-standard-2.cmap"'
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
                #jdm 1/26 check for the occurace of bd after the last underscore
                #this is the same layer but w/ a slightly diff algorithm on the remote
                #sensing side of things.
                if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
                else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            layerTitle = tif
            tifList.append({ 'TIF'             : tif,
                             'PROJVALID'       : len(proj) > 0,
                             'PROJ'            : formatproj(proj,10),
                             'WKT'             : getwkt(tif_fullpath),
                             'NAME'            : layerName,
                             'GROUP'           : group,
                             'DATA'            : dataDir + '/' + tif,
                             'TITLE'           : layerTitle,
                             'ABSTRACT'        : layerTitle,
                             'COLORMAPLINE'    : colormapline,
                             'MASK'            : '',
			     'GROUPTEXT'       : 'GROUP FW_%s' % layerName
                             })                           
            layerTitles[layerName] = layerTitle
            #jdm 5/29: for layers groups that we want ewsMask on do so     
            if maskBool:
                for mask in ewsMask:
                    tifList.append({ 'TIF'             : tif,
                                     'PROJVALID'       : len(proj) > 0,
                                     'PROJ'            : formatproj(proj,10),
                                     'WKT'             : getwkt(tif_fullpath),
                                     'NAME'            : layerName + mask['name'],
                                     'GROUP'           : group,
                                     'DATA'            : dataDir + '/' + tif,
                                     'TITLE'           : layerTitle + mask['name'],
                                     'ABSTRACT'        : layerTitle + mask['name'],
                                     'COLORMAPLINE'    : colormapline,
                                     'MASK'            : 'MASK ' + mask['name'],
 				     'GROUPTEXT'       : 'GROUP FW_%s' % 'FW_'+ layerName
                                     })                                                              
        except Exception as e:
            print e
            continue
    layerTemplate = Template(layerTemplateName)
    layers = ""
    for tifdict in tifList:
        if tifdict['PROJVALID']:
            layers = layers + layerTemplate.render(tifdict)    
    return layers
                           
###
### create a tiflist entry for each .tif file in DATA_DIR+"/fsdata/efetac_nasa/ews:
### these are the actual data files as they are dropped off via ftp
###
ARCHIVE_DIR = DATA_DIR + "/fsdata/efetac_nasa/"+choose("X_LC_ALLYEAR", "AllYear") #DATA_DIR is "/flood" currently
for tif in sorted([file for file in os.listdir(ARCHIVE_DIR) if file.endswith(".tif")], reverse=False):
    try:
        tif = re.sub('^' + ARCHIVE_DIR + '/', '', tif)
        tif_fullpath = ARCHIVE_DIR + '/' + tif;
        proj = getproj(tif_fullpath)
        modDate = getModDate(tif_fullpath)
        nameform = re.sub(r'^.*/', '', tif)
        if tif.startswith("gtac"): #jdm: I don't think this if is needed Marked4Delete
            group = "GTAC-FHTET"
            group_abstract = "Layers uploaded by GTAC-FHTET"
            colormapfile   = "gtac_fhtet_percent_change_cmap.cmap"
            colormapcsv    = "gtac_fhtet_percent_change_cmap.csv"
            keyimage       = "cmapicons/new-forwarn2-standard-legend-2.png"
        else:
            group = "EFETAC-NASA"
            group_abstract = "Layers uploaded by TACs-NASA"
            colormapfile   = "new-forwarn2-standard-2.cmap"
            colormapcsv    = "efetac_nasa_percent_change_cmap.csv"
            keyimage       = "cmapicons/new-forwarn2-standard-legend-2.png"
        layerName  = group + "_" + re.sub(r'_.*$', '', nameform)
        layerTitle = tif

        #jdm 1/27 if it is a 2010 file use the old color map
        if re.search(r'2010', nameform):
            colormapfile = "ewsold.cmap"

        tiflist.append({ 'TIF'             : tif,
                         'PROJVALID'       : len(proj) > 0,
                         'PROJ'            : formatproj(proj,10),
                         'WKT'             : getwkt(tif_fullpath),
                         'NAME'            : layerName,
                         'GROUP'           : group,
                         'DATA'            : ARCHIVE_DIR + '/' + tif,
                         'GROUP_ABSTRACT'  : group_abstract,
                         'TITLE'           : layerTitle,
                         'ABSTRACT'        : layerTitle,
                         'COLORMAPFILE'    : colormapfile,
                         'COLORMAPCSV'     : colormapcsv,
                         'KEYIMAGE'        : keyimage,
                         'MODDATE'         : modDate,
                         'MASK'            : ''
                         })
        layerTitles[layerName] = layerTitle

        for mask in ewsMask:
            tiflist.append({ 'TIF'             : tif,
                             'PROJVALID'       : len(proj) > 0,
                             'PROJ'            : formatproj(proj,10),
                             'WKT'             : getwkt(tif_fullpath),
                             'NAME'            : layerName + mask['name'],
                             'GROUP'           : group,
                             'DATA'            : ARCHIVE_DIR + '/' + tif,
                             'GROUP_ABSTRACT'  : group_abstract,
                             'TITLE'           : layerTitle + mask['name'], # change to be desired layer title in the viewer, e.g. efetac_nasa-retro/3YrBaseline/current_december3_december26.tif
                             'ABSTRACT'        : layerTitle + mask['name'], # change this to match title 
                             'COLORMAPFILE'    : colormapfile,
                             'COLORMAPCSV'     : colormapcsv,
                             'KEYIMAGE'        : keyimage,
                             'MODDATE'         : modDate,
                             'MASK'            : 'MASK ' + mask['name']
                             })
    except:
        continue



######################################

###
### build the LAYERS string by appending a rendered layer template for each valid layer:
###
layerTemplate = Template("ews.layer.tmpl")
LAYERS = ""
for tifdict in tiflist:
    if tifdict['PROJVALID']:
        LAYERS = LAYERS + layerTemplate.render( tifdict )

LAYERS1 = LAYERS
        
###
### Append to ews.map FILE Seasonally-Adjusted Change from All-Year pheno-cluster max (MUC):
###
LAYERS2 = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_MUC_ALL_YR", "ews_gen.layer.tpl.map", "EFETAC-NASA_MUCAllYear", ".tif", "no", True)
LAYERS2_NOMASK = getLayersNoMask(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_MUC_ALL_YR", "ews_gen.layer.tpl.map", "EFETAC-NASA_MUCAllYear", ".tif", "no", False)
LAYERS2_NOMASK_FW2_LEIDOS = getLayersNoMask(FW2_DATA_DIR + "/Leidos/" + "X_LC_1YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_MUCAllYear", ".tif", "no", False)
LAYERS2_NOMASK = LAYERS2_NOMASK + LAYERS2_NOMASK_FW2_LEIDOS

###
### Append to ews.map FILE Seasonally-Adjusted Change from All-Year mean of maximums (MMAX):
###
LAYERS3 = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_MMAX_ALL_YR", "ews_gen.layer.tpl.map", "EFETAC-NASA_MoMAllYear", ".tif", "no", True)
LAYERS3_NOMASK = getLayersNoMask(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_MMAX_ALL_YR", "ews_gen.layer.tpl.map", "EFETAC-NASA_MoMAllYear", ".tif", "no", False)
LAYERS3_NOMASK_FW2_LEIDOS = getLayersNoMask(FW2_DATA_DIR + "/Leidos/" + "X_LC_MMAX_ALL_YR", "ews_gen.layer.tpl.map", "EFETAC-NASA_MoMAllYear", ".tif", "no", False)
LAYERS3_NOMASK = LAYERS3_NOMASK + LAYERS3_NOMASK_FW2_LEIDOS

LAYERS4 = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_ALLYEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_AllYear", ".tif", "no", True)
LAYERS4_NOMASK = getLayersNoMask(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_ALLYEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_AllYear", ".tif", "no", False)
LAYERS4_NOMASK_FW2_LEIDOS = getLayersNoMask(FW2_DATA_DIR + "/Leidos/" + "X_LC_ALLYEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_AllYear", ".tif", "no", False)
LAYERS4_NOMASK = LAYERS4_NOMASK + LAYERS4_NOMASK_FW2_LEIDOS

###
### write out ews.map, using EPSG 3857 (WebMercator),
### and ewswgs84, using EPSG 4326, and ewswcs, for serving WCS (using MapServer 6):
###

#This was used when all layers were combined into the one ews service which was taken down
LAYERSCOMBINED = LAYERS1 + LAYERS2 + LAYERS3

#This service is no longer being written due to getting pegged
# mapTemplate = Template("ews.map.tmpl")
# SERVICE_NAME = "ews"
# f_new = openMapfileForWriting("ews.map")
# f_new.write( mapTemplate.render( {
            # 'DATA_DIR'                : DATA_DIR,
            # 'LAYERS'                  : LAYERSCOMBINED,
            # 'WMS_SRS'                 : "EPSG:3857 EPSG:4326 EPSG:900913",
            # 'MAPFILE_PROJECTION'      : '"init=epsg:3857"',
            # 'SERVICE_NAME'            : SERVICE_NAME,
            # 'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            # 'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            # 'OWS_TITLE'               : "NEMAC %s WMS" % (SERVICE_NAME),
            # 'OWS_ABSTRACT'            : "NEMAC %s WMS" % (SERVICE_NAME),
            # 'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            # 'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            # 'MS_ERRORFILE'            : "../var/log/%s.log" % (SERVICE_NAME),
            # 'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            # } ) )
# f_new.close()

mapTemplate = Template("ews.map.tmpl")
SERVICE_NAME = "muc"
f_new = openMapfileForWriting("muc.map")
f_new.write( mapTemplate.render( {
            'DATA_DIR'                : DATA_DIR,
            'LAYERS'                  : LAYERS2_NOMASK,
            'WMS_SRS'                 : "EPSG:3857 EPSG:4326 EPSG:900913",
            'MAPFILE_PROJECTION'      : '"init=epsg:3857"',
            'SERVICE_NAME'            : SERVICE_NAME,
            'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'               : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'            : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'            : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            } ) )
f_new.close()

mapTemplate = Template("ews.map.tmpl")
SERVICE_NAME = "mmax"
f_new = openMapfileForWriting("mmax.map")
f_new.write( mapTemplate.render( {
            'DATA_DIR'                : DATA_DIR,
            'LAYERS'                  : LAYERS3_NOMASK,
            'WMS_SRS'                 : "EPSG:3857 EPSG:4326 EPSG:900913",
            'MAPFILE_PROJECTION'      : '"init=epsg:3857"',
            'SERVICE_NAME'            : SERVICE_NAME,
            'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'               : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'            : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'            : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            } ) )
f_new.close()

mapTemplate = Template("ews.map.tmpl")
SERVICE_NAME = "max"
f_new = openMapfileForWriting("max.map")
f_new.write( mapTemplate.render( {
            'DATA_DIR'                : DATA_DIR,
            'LAYERS'                  : LAYERS4_NOMASK,
            'WMS_SRS'                 : "EPSG:3857 EPSG:4326 EPSG:900913",
            'MAPFILE_PROJECTION'      : '"init=epsg:3857"',
            'SERVICE_NAME'            : SERVICE_NAME,
            'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'               : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'            : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'            : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            } ) )
f_new.close()

# template = Template("ews_gen.tpl.map")
# f_new = openMapfileForAppending("ews.map")
# SERVICE_NAME = "ews"
# WCS_LABEL = ""
# f_new.write( template.render( {
            # 'DATA_DIR'              : DATA_DIR,
            # 'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ews1year"),
            # 'LAYERS'                : LAYERS,
            # 'WMS_SRS'               : "EPSG:4326 EPSG:2163 EPSG:3857 EPSG:900913",
            # 'MAPFILE_PROJECTION'    : '"init=epsg:3857"',
            # 'SERVICE_NAME'          : SERVICE_NAME,
            # 'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            # 'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            # 'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            # 'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            # 'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            # 'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            # 'MS_ERRORFILE'          : "../var/log/%s.log" % (SERVICE_NAME),
            # 'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            # 'WCS_LABEL'             : WCS_LABEL
            # } ) )
# f_new.close()


#This service is no longer being written due to getting pegged
# f_new = openMapfileForWriting("ewswgs84.map")
# SERVICE_NAME = "ewswgs84"
# f_new.write( mapTemplate.render( {
            # 'DATA_DIR'                : DATA_DIR,
            # 'LAYERS'                  : LAYERS,
            # 'WMS_SRS'                 : "EPSG:4326 EPSG:900913",
            # 'MAPFILE_PROJECTION'      : '"init=epsg:4326"',
            # 'SERVICE_NAME'            : SERVICE_NAME,
            # 'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            # 'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            # 'OWS_TITLE'               : "NEMAC %s WMS" % (SERVICE_NAME),
            # 'OWS_ABSTRACT'            : "NEMAC %s WMS" % (SERVICE_NAME),
            # 'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            # 'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            # 'MS_ERRORFILE'            : "../var/log/%s.log" % (SERVICE_NAME),
            # 'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            # } ) )
# f_new.close()


wcslayerTemplate = Template("ewswcs.layer.tmpl")
LAYERS = ""
for tifdict in tiflist:
    if tifdict['PROJVALID']:
        LAYERS = LAYERS + wcslayerTemplate.render( tifdict )
        
f_new = openMapfileForWriting("ewswcs.map")
SERVICE_NAME = "ewswcs"
f_new.write( mapTemplate.render( {
            'DATA_DIR'                : DATA_DIR,
            'LAYERS'                  : LAYERS,
#           'EPSG'                    : "2163",
            'WMS_SRS'                 : "EPSG:2163",
            'MAPFILE_PROJECTION'      : '"init=epsg:2163"',
            'SERVICE_NAME'            : SERVICE_NAME,
            'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'               : "NEMAC %s WCS" % (SERVICE_NAME),
            'OWS_ABSTRACT'            : "NEMAC %s WCS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'            : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            } ) )
f_new.close()


###-------DONE WITH curr, prev1 and prev2 SECTION except that All Year is done above------------------
###-------Now on with the 1, 3 and All year parts-----------------------------------------------------


###
### CREATE ewswcs1year.map FILE:
###
LAYERS = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_1YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_1Year", ".tif", "yes", False)
# Add new Leidos layers living in /fsdata3
LAYERS_FW2_LEIDOS = getLayers(FW2_DATA_DIR + "/Leidos/" + "X_LC_1YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_1Year", ".tif", "yes", False)
LAYERS = LAYERS + LAYERS_FW2_LEIDOS
template = Template("ews_gen.tpl.map")
f_new = openMapfileForWriting("ewswcs1year.map")
SERVICE_NAME = "ewswcs1year"
WCS_LABEL = "EWS 1Year"
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ewswcs1year"),
            'LAYERS'                : LAYERS,
            'WMS_SRS'               : "EPSG:2163",
            'MAPFILE_PROJECTION'    : '"init=epsg:2163"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL
            } ) )
f_new.close()


###
### Create the ewswcs3year.map file:
###
LAYERS = getLayers(DATA_DIR + "/fsdata/efetac_nasa/X_LC_3YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_3Year", ".tif", "yes", False)
LAYERS_FW2_LEIDOS = getLayers(FW2_DATA_DIR + "/Leidos/" + "X_LC_3YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_3Year", ".tif", "yes", False)
LAYERS = LAYERS + LAYERS_FW2_LEIDOS
template = Template("ews_gen.tpl.map")
f_new = openMapfileForWriting("ewswcs3year.map")
SERVICE_NAME = "ewswcs3year"
WCS_LABEL = "EWS 3Year"
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ewswcs3year"),
            'LAYERS'                : LAYERS,
            'WMS_SRS'               : "EPSG:2163",
            'MAPFILE_PROJECTION'    : '"init=epsg:2163"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL
            } ) )
f_new.close()


###
### Create the ewswcs5year.map file:
###
LAYERS = getLayers(DATA_DIR + "/fsdata/efetac_nasa/X_LC_5YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_5Year", ".tif", "yes", False)
LAYERS_FW2_LEIDOS = getLayers(FW2_DATA_DIR + "/Leidos/" + "X_LC_5YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_5Year", ".tif", "yes", False)
LAYERS = LAYERS + LAYERS_FW2_LEIDOS
template = Template("ews_gen.tpl.map")
f_new = openMapfileForWriting("ewswcs5year.map")
SERVICE_NAME = "ewswcs5year"
WCS_LABEL = "EWS 5Year"
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ewswcs5year"),
            'LAYERS'                : LAYERS,
            'WMS_SRS'               : "EPSG:2163",
            'MAPFILE_PROJECTION'    : '"init=epsg:2163"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL
            } ) )
f_new.close()

###
### CREATE ews1year.map FILE:
###
LAYERS1 = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_1YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_1Year", ".tif", "no", True)
LAYERS1_NOMASK = getLayersNoMask(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_1YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_1Year", ".tif", "no", False)
LAYERS1_FW2_LEIDOS_NOMASK = getLayersNoMask(FW2_DATA_DIR + "/Leidos/" + "X_LC_1YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_1Year", ".tif", "no", False)
LAYERS1_NOMASK = LAYERS1_NOMASK + LAYERS1_FW2_LEIDOS_NOMASK
# template = Template("ews_gen.tpl.map")
# f_new = openMapfileForWriting("ews1year.map")
# SERVICE_NAME = "ews1year"
# WCS_LABEL = "EWS 1Year"
# f_new.write( template.render( {
            # 'DATA_DIR'              : DATA_DIR,
            # 'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ews1year"),
            # 'LAYERS'                : LAYERS,
            # 'WMS_SRS'               : "EPSG:4326 EPSG:2163 EPSG:3857 EPSG:900913",
            # 'MAPFILE_PROJECTION'    : '"init=epsg:3857"',
            # 'SERVICE_NAME'          : SERVICE_NAME,
            # 'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            # 'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            # 'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            # 'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            # 'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            # 'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            # 'MS_ERRORFILE'          : "../var/log/%s.log" % (SERVICE_NAME),
            # 'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            # 'WCS_LABEL'             : WCS_LABEL
            # } ) )
# f_new.close()


###
### Append to ews1year.map FILE Early Detect (ALC) Change from previous year:
###
LAYERS2 = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_ALC_1YR", "ews_gen.layer.tpl.map", "EFETAC-NASA_ALC1YR", ".tif", "no", True)
LAYERS2_NOMASK = getLayersNoMask(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_ALC_1YR", "ews_gen.layer.tpl.map", "EFETAC-NASA_ALC1YR", ".tif", "no", False)
LAYERS2_FW2_LEIDOS_NOMASK = getLayersNoMask(FW2_DATA_DIR + "/Leidos/" + "X_LC_ALC_1YR", "ews_gen.layer.tpl.map", "EFETAC-NASA_ALC1YR", ".tif", "no", False)
LAYERSCOMBINED = LAYERS1 + LAYERS2
LAYERSCOMBINED_NOMASK = LAYERS1_NOMASK + LAYERS2_NOMASK + LAYERS2_FW2_LEIDOS_NOMASK
template = Template("ews_gen.tpl.map")
f_new = openMapfileForWriting("ews1year.map")
SERVICE_NAME = "ews1year"
WCS_LABEL = "EWS 1Year"
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ews1year"),
            'LAYERS'                : LAYERSCOMBINED_NOMASK,
            'WMS_SRS'               : "EPSG:4326 EPSG:2163 EPSG:3857 EPSG:900913",
            'MAPFILE_PROJECTION'    : '"init=epsg:3857"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL
            } ) )
f_new.close()

###
### Create the ews3year.map file:
###
LAYERS = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_3YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_3Year", ".tif", "no", True)
LAYERS_NOMASK = getLayersNoMask(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_3YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_3Year", ".tif", "no", False)
LAYERS_FW2_LEIDOS_NOMASK = getLayersNoMask(FW2_DATA_DIR + "/Leidos/" + "X_LC_3YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_3Year", ".tif", "no", False)
LAYERS_NOMASK = LAYERS_NOMASK + LAYERS_FW2_LEIDOS_NOMASK
template = Template("ews_gen.tpl.map")
f_new = openMapfileForWriting("ews3year.map")
SERVICE_NAME = "ews3year"
WCS_LABEL = "EWS 3Year"
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ews3year"),
            'LAYERS'                : LAYERS_NOMASK,
            'WMS_SRS'               : "EPSG:4326 EPSG:2163 EPSG:3857 EPSG:900913",
            'MAPFILE_PROJECTION'    : '"init=epsg:3857"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL
            } ) )
f_new.close()


###
### Create the ews5year.map file:
###
LAYERS = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_5YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_5Year", ".tif", "no", True)
LAYERS_NOMASK = getLayersNoMask(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_5YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_5Year", ".tif", "no", False)
LAYERS_FW2_LEIDOS_NOMASK = getLayersNoMask(FW2_DATA_DIR + "/Leidos/" + "X_LC_5YEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA_5Year", ".tif", "no", False)
LAYERS_NOMASK = LAYERS_NOMASK + LAYERS_FW2_LEIDOS_NOMASK
template = Template("ews_gen.tpl.map")
f_new = openMapfileForWriting("ews5year.map")
SERVICE_NAME = "ews5year"
WCS_LABEL = "EWS 5Year"
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ews5year"),
            'LAYERS'                : LAYERS_NOMASK,
            'WMS_SRS'               : "EPSG:4326 EPSG:2163 EPSG:3857 EPSG:900913",
            'MAPFILE_PROJECTION'    : '"init=epsg:3857"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../var/log/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL
            } ) )
f_new.close()

#create the all year dyna_ews map files
LAYERS = getLayers(DATA_DIR + "/fsdata/efetac_nasa/"+ "X_LC_ALLYEAR", "ews_gen.layer.tpl.map", "EFETAC-NASA", ".tif", "no", True)


# create layer definitions for duration products
#def getLayers(dataDir, layerTemplateName, groupName, fileExt, wcs, maskBool, colormapfile=None)



###
### Create the vlayers.map file:
###

# Storm Prediction Center layers

spc_report_type_colors = {
  'hail': '235 61 52',
  'wind': '52 94 235',
  'tornado': '51 204 255'
}

def get_spc_layer_config(**kwargs):
  return {
    'DATA_DIR'     : DATA_DIR,
    'POSTGIS_CONNECTION_STRING' : POSTGIS_CONNECTION_STRING,
    'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "vlayers"),
    'DB_TABLE' : kwargs.get('db_table', 'spc_reports'),
    'LEGEND_STYLE_SYMBOL': kwargs.get('style_symbol', 'circle'),
    'LEGEND_STYLE_SIZE': kwargs.get('style_size', '10'),
    # No defaults
    'LAYER_NAME' : kwargs['layer_name'],
    'REPORT_TYPE' : kwargs['report_type'],
    'START_DATESTRING_YYMMDD': kwargs['start_date'],
    'END_DATESTRING_YYMMDD' : kwargs['end_date'],
    'WMS_TITLE': kwargs['wms_title'],
    'LEGEND_STYLE_COLOR': kwargs['style_color']
  }

A_PATH_TO_FW2_PRODUCTS = os.path.join(FW2_DATA_DIR, FW2_SOURCES_AS_LIST[0], 'X_LC_1YEAR')

current_dates_yymmdd = list(getCurrentDates(A_PATH_TO_FW2_PRODUCTS))

today = datetime.date.today()
start_of_year = today.replace(today.year, 1, 1)

spc_layer_date_ranges = {
  'current': [
    (current_dates_yymmdd[0] - datetime.timedelta(days=23)),
    current_dates_yymmdd[0]
   ],
  'previous1': [
    (current_dates_yymmdd[1] - datetime.timedelta(days=23)),
    current_dates_yymmdd[1],
   ],
  'previous2': [
    (current_dates_yymmdd[2] - datetime.timedelta(days=23)),
    current_dates_yymmdd[2]
   ],
  'ytd': [
    start_of_year,
    today
  ]
}

spc_layer_templates = []

spc_template = Template("spc_layer.tpl.map")

for report_type in spc_report_type_colors.keys():
  for period_type in spc_layer_date_ranges.keys():
    kwargs = {
      'layer_name': 'spc_{}_{}'.format(report_type, period_type),
      'report_type': report_type,
      'start_date': spc_layer_date_ranges[period_type][0].strftime('%y%m%d'),
      'end_date': spc_layer_date_ranges[period_type][1].strftime('%y%m%d'),
      'wms_title': 'Storm Prediction Center {} reports ({})'.format(report_type, period_type),
      'style_color': spc_report_type_colors[report_type]
    }
    config = get_spc_layer_config(**kwargs)
    rendered = spc_template.render(config)
    spc_layer_templates.append(rendered)



template = Template("vlayers.tpl.map")
f_new = openMapfileForWriting("vlayers.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'POSTGIS_CONNECTION_STRING' : POSTGIS_CONNECTION_STRING,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "vlayers"),
            'SPC_LAYERS' : '\n'.join(spc_layer_templates)
            } ) )
f_new.close()


###
### Create the derivatives.map file:
###
template = Template("derivatives.tpl.map")
f_new = openMapfileForWriting("derivatives.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "derivatives")
            } ) )
f_new.close()

###
### Create the modisndvi.map file:
###
template = Template("modisndvi.tpl.map")
f_new = openMapfileForWriting("modisndvi.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "modisndvi")
            } ) )
f_new.close()

###
### Create the parameters.map file:
###
template = Template("parameters.tpl.map")
f_new = openMapfileForWriting("parameters.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "parameters")
            } ) )
f_new.close()

###
### Create the integrals.map file:
###
template = Template("integrals.tpl.map")
f_new = openMapfileForWriting("integrals.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "integrals")
            } ) )
f_new.close()

###
### Create the rlayers.map file:
###
from smap import SMAP9kAnomalyTopWeekly as smap_weekly
smap_layer = smap_weekly()
template = Template("rlayers.tpl.map")
f_new = openMapfileForWriting("rlayers.map")
f_new.write( template.render( {
            'SMAP_9K_ANOMALY_TOP_WEEKLY' : smap_layer.render_map_tpl(),
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "rlayers")
            } ) )
f_new.close()

###
### Create the landcover-mask.map file:
###
template = Template("landcover-mask.tpl.map")
f_new = openMapfileForWriting("landcover-mask.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "landcover-mask")
            } ) )
f_new.close()

###
### Create the wlayers.map file:
###
noaa_damage_tracks_date_range_template = '{0}/{1}/PT5M'
A_PATH_TO_FW2_PRODUCTS = os.path.join(FW2_DATA_DIR, FW2_SOURCES_AS_LIST[0], 'X_LC_1YEAR')
yearToDate = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, noaa_damage_tracks_date_range_template, yearToDate=True)
historicalToDate = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, noaa_damage_tracks_date_range_template, yearToDate=True, startYear=2010)
currentPeriod = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, noaa_damage_tracks_date_range_template)
previousOne = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, noaa_damage_tracks_date_range_template, timeframe=1)
previousTwo = makeDateRangeQueryParam(A_PATH_TO_FW2_PRODUCTS, noaa_damage_tracks_date_range_template, timeframe=2)
template = Template("wlayers.tpl.map")
f_new = openMapfileForWriting("wlayers.map")
f_new.write( template.render( {
            'YEAR_TO_DATE'          : yearToDate,
            'CURRENT_PERIOD'        : currentPeriod,
            'HISTORICAL_TO_DATE'    : historicalToDate,
            'PREVIOUS_ONE'          : previousOne,
            'PREVIOUS_TWO'          : previousTwo,
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "wlayers")
            } ) )
f_new.close()

###
### Create the aklayers.map file:
###
template = Template("aklayers.tpl.map")
f_new = openMapfileForWriting("aklayers.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "aklayers")
            } ) )
f_new.close()


###
### Create the treatments.map file:
###
template = Template("treatments.tpl.map")
f_new = openMapfileForWriting("treatments.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'POSTGIS_CONNECTION_STRING' : POSTGIS_CONNECTION_STRING,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "treatments")
            } ) )
f_new.close()

###
### Create the phenoregions.map file:
###
template = Template("phenoregions.tpl.map")
f_new = openMapfileForWriting("phenoregions.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "phenoregions")
            } ) )
f_new.close()

###
### Create the boundaries.map file:
###
template = Template("boundaries.tpl.map")
f_new = openMapfileForWriting("boundaries.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'POSTGIS_CONNECTION_STRING' : POSTGIS_CONNECTION_STRING,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "boundaries")
            } ) )
f_new.close()

###
### Create the fire.map file:
###
template = Template("fire.tpl.map")
f_new = openMapfileForWriting("fire.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'POSTGIS_CONNECTION_STRING' : POSTGIS_CONNECTION_STRING,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "fire")
            } ) )
f_new.close()

###
### Create the ads.map file:
###
template = Template("ads.tpl.map")
f_new = openMapfileForWriting("ads.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'POSTGIS_CONNECTION_STRING' : POSTGIS_CONNECTION_STRING,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "ads")
            } ) )
f_new.close()

###
### Create the forwarn-ndvi-change.map file:
###
template = Template("forwarn-ndvi-change.tpl.map")
f_new = openMapfileForWriting("forwarn-ndvi-change.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'POSTGIS_CONNECTION_STRING' : POSTGIS_CONNECTION_STRING,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "forwarn-ndvi-change")
            } ) )
f_new.close()

#################################################################################################

###
### Create symlinks for the map files, and change a few permission settings
###
os.system("(cd ../html ; ln -f -s ../msconfig/ews.map . ; ln -f -s ../msconfig/ewswgs84.map . ; ln -f -s ../msconfig/ewswcs.map .)")
os.system("chmod a+w ../var/log");
os.system("chmod a+w ../var/log/*.log > /dev/null 2>&1");
os.system("chmod g-w ../html/*");

###
### write out the layer titles file:
###
f_out = open("layerTitles.txt", "w");
for layerName in layerTitles:
    f_out.write("%s:%s\n" % (layerName, layerTitles[layerName]))
f_out.close()

###
### write out the html/index.html file:
###
FSWMS_VERSION = subprocess.Popen(['../version'], stdout=subprocess.PIPE).communicate()[0].strip()
f_out = open("../html/index.html", "w");
f_out.write(interp("""
<table width="100%"><tr>
<td align="left">This is ForWarn version #{FSWMS_VERSION}.</td>
<td align="right">Viewer: <a href="view/index.html">view/index.html</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Config file: <a href="view/config/ews_config.xml">view/config/ews_config.xml</a></td>
</tr></table>
<p>
ForWarn WMS addresses are:
<ul>
"""))

for mapfile in mapfilesWritten:
    service = re.sub(r'\.map$', '', mapfile)
    f_out.write(interp("""<li><a href="#{SERVER_URL}/%(SERVICE)s">#{SERVER_URL}/%(SERVICE)s</a> [ <a href="#{SERVER_URL}/%(SERVICE)s?SERVICE=WMS&REQUEST=GetCapabilities">GetCapabilities</a> ]\n""" %
                       { "SERVICE" : service }))

f_out.write(interp("""</ul>\n"""))

f_out.close()


