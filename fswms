#! /usr/bin/python

import re, os, sys, subprocess, grp, pwd, getpass
import pystache as p

def usage():
    # Print a short usage message for this script
    print "usage: fswms COMMAND [ARG ...]"
    print "   where COMMAND is one of: 'list', 'create', 'delete', 'deploy', 'dist'"
    exit(-1)

def get_file_owner(file):
    """Return the name of the user who owns a file or directory"""
    stat_info = os.stat(file)
    uid = stat_info.st_uid
    user = pwd.getpwuid(uid)[0]
    return user

def get_file_group(file):
    """Return the name of the group owner a file or directory"""
    stat_info = os.stat(file)
    gid = stat_info.st_gid
    group = pwd.getpwuid(gid)[0]
    return group

def get_current_user():
    """Return the name of the current user"""
    return getpass.getuser()

def standardize_version_tag(tag):
    # Return a copy of the string `tag` with the prefix `fswms-` prepended to it,
    # unless `tag` already starts with that prefix, in which case it is returned
    # unaltered.
    if tag.startswith("fswms-"):
        return tag
    else:
        return "fswms-" + tag

def system(cmd):
    # Convenience wrapper for os.system that lets us print the command being
    # executed, for debugging.
    #print cmd
    return os.system(cmd)

def compare_versions(a,b):
    # Sorting comparison function for tags of the form N.M
    try:
        [amajor,aminor] = [int(x) for x in a.split('.')]
        [bmajor,bminor] = [int(x) for x in b.split('.')]
    except:
        if a < b:
            return -1
        elif a > b:
            return 1
        else:
            return 0
    if amajor < bmajor:
        return -1
    elif amajor > bmajor:
        return 1
    else:
        if aminor < bminor:
            return -1
        elif aminor > bminor:
            return 1
    return 0

def tag_list():
    # Return a list of all tags of the form 'fswms-*'
    return sorted([re.sub(r'^fswms-(.*)$',r'\1',x) for x in
                   subprocess.Popen(['git', 'tag'], stdout=subprocess.PIPE).communicate()[0].split('\n') if x != ''], cmp=compare_versions)

def tag_exists(tag):
    # Return True if and only if the named tag exists
    tag = re.sub(r'^fswms-', '', tag)
    for t in tag_list():
        if t == tag:
            return True
    return False

def dist(tag):
    # This function creates a gzipped tar file in the top level directory, containing a copy of
    # fswms corresponding to the named tag.  The name of the tar file will be the tag followed
    # by the suffix ".tgz".
    #
    # This function works by exporting the named tag from the current project's repository
    # in ./.git.  Therefore, the named tag must already exist in that repo.
    system("/bin/rm -rf .stage")
    stagedir = p.render('.stage/{{{tag}}}', {'tag' : tag})
    os.makedirs(stagedir)
    status = system(p.render("(git archive --format=tar {{{tag}}} | (cd {{{stagedir}}} ; tar xf -)) > /dev/null 2>&1",
                                { 'tag'      : tag,
                                  'stagedir' : stagedir}))
    if status != 0:
        print "Cannot export tag %s" % tag
        sys.exit(-1)
    f = open(stagedir + "/version", "w")
    f.write(p.render("""#! /usr/bin/python
#
# This script prints out the version number of this copy of fswms.
# This script was autogenerated by the command `fswms dist {{{tag}}}`.
print "{{{tag}}}"
"""
    , { 'tag' : tag }))
    f.close()
    system(p.render("chmod +x {{{stagedir}}}/version", { 'stagedir' : stagedir }))
    system(p.render("/bin/rm -rf {{{stagedir}}}/var", { 'stagedir' : stagedir }))
    distfile = tag + ".tgz"
    system(p.render("(cd .stage ; tar cfz - {{{tag}}}) > {{{distfile}}}", {
                'tag'      : tag,
                'distfile' : distfile
                }))
    system("/bin/rm -rf .stage")
    return distfile


def validate_deploy_dst(dst):
    # Return True or False, depending on whether the given dst directory is a valid
    # deployment destination for fswms.
    #   make sure dst exists:
    if not os.path.exists(dst):
        return False
    #   make sure dst contains "/var/Config.py":
    if not os.path.exists(dst + "/var/Config.py"):
        return False
    #   load that "/var/Config.py"
    sys.path.append(dst + "/var")
    import Config
    #   make sure that the BASE_DIR that the Config.py points to is in fact the same as dst:
    if os.stat(dst).st_ino != os.stat(Config.BASE_DIR).st_ino:
        return False
    #   Make sure that the "/var/Config.py" file that BASE_DIR contains is the same as the
    #   one in dst.  This is actually redundant, since we just validated that the containing
    #   dirs are the same.
    if os.stat(dst + "/var/Config.py").st_ino != os.stat(Config.BASE_DIR + "/var/Config.py").st_ino:
        return False
    # If we got this far, all is well
    return True
    
def deploy(tag, dst):
    ###
    ### Deploy the named tag to the named dst dir
    ###
    
    # make sure deploy dst is valid
    if not validate_deploy_dst(dst):
        print "Directory `%s` does not appear to be a valid fswms deployment destination" % dst
        sys.exit(-1)
    # Use the dist() function to create a tgzfile containing a copy of fswms
    # corresponding to the given tag
    print "retreiving tag %s from git repo..." % tag
    tgzfile = dist(tag) 
    # make sure tgzfile is really there
    if not os.path.exists(tgzfile):
        print "Archive file %s does not exist." % tgzfile
        sys.exit(-1)
    # unpack tgzfile into staging dir:
    system("/bin/rm -rf .stage")
    os.mkdir(".stage")
    system(p.render("cat {{{tgzfile}}} | ( cd .stage ; tar xfz - )", { 'tgzfile' : tgzfile }))
    # remove all files from dst except 'var' subdir:
    print "cleaning old files from %s..." % dst
    dst_owner_different = (get_file_owner(dst) != get_current_user())
    for f in [f for f in os.listdir(dst) if f != 'var']:
        system(p.render("{{{sudo}}} /bin/rm -rf {{{dst}}}/{{{f}}}", {
                    'sudo' : ( "sudo" if dst_owner_different else "" ),
                    'dst' : dst,
                    'f'   : f
                    }))
    # copy everything from the staging directory to the dst:
    print "copying %s files to %s..." % (tag, dst)
    if dst_owner_different:
        system(p.render("sudo chmod o+w {{{dst}}}", {
                    'dst' : dst
                    }))
    system(p.render("(cd .stage/{{{tag}}} ; tar cf - *) | (cd {{{dst}}} ; tar xf -)", {
                'tag' : tag,
                'dst' : dst
                }))
    # remove other-write and group-write permission on the dst html dir:
    system(p.render("chmod -R g-w,o-w {{{dst}}}/html", { 'dst' : dst }))
    # if dst is owned by someone other than the current user, use sudo
    # to reset ownership of copied files back to that owner
    if dst_owner_different:
        system(p.render("sudo chown -R {{{user}}}.{{{group}}} {{{dst}}}", {
                    'user'  : get_file_owner(dst),
                    'group' : get_file_group(dst),
                    'dst'   : dst
                    }))
        system(p.render("sudo chmod o-w {{{dst}}}", {
                    'dst' : dst
                    }))
    # run fscron in newly deploy dst dir:
    print "running fscron in %s..." % dst
    system(p.render("cd {{{dst}}}/msconfig ; {{{sudo}}} ./fscron", {
                'sudo' : (('sudo su ' + get_file_owner(dst)) if dst_owner_different else ""),
                'dst' : dst
                }))
    # clean up staging dir
    print "cleaning up..."
    os.unlink(tgzfile)
    system("/bin/rm -rf .stage")
    print "finished deploying %s to %s" % (tag, dst)

if __name__ == "__main__":
    try:
        command = sys.argv[1]
    except:
        usage()

    if command == "list":
        print ("The versions of fswms currently defined in the git repository are: %s" % ", ".join(tag_list()))
        sys.exit(0)

    if command == "dist":
        try:
            tag = standardize_version_tag(sys.argv[2])
        except:
            print "usage: fswms dist TAG"
            sys.exit(-1)
        tag = standardize_version_tag(sys.argv[2])
        system("git checkout master")
        system("git pull origin master")
        distfile = dist(tag)
        print "Wrote `" + distfile + "`"
        sys.exit(0)

    if command == "deploy":
        try:
            tag = standardize_version_tag(sys.argv[2])
            dst = re.sub(r'/$', '', sys.argv[3]) # be sure to remove any trailing '/' from dst dir
        except:
            print "usage: fswms deploy TAG DESTINATION-DIRECTORY"
            sys.exit(-1)
        deploy(tag, dst)
        sys.exit(0)


    if command == "create":
        try:
            tag = standardize_version_tag(sys.argv[2])
        except:
            print "usage: fswms create TAG"
            sys.exit(-1)
        if tag_exists(tag):
            print "Error: The tag '%s' already exists." % tag
            sys.exit(-1)
        system("git checkout master")
        system("git pull origin master")
        system(p.render("git tag -a -m 'create tag {{{tag}}}' {{{tag}}}", { 'tag' : tag }))
        system("git push origin master")
        system("git push origin %s" % tag)
        print "created %s " % (tag)
        sys.exit(-1)

    if command == "delete":
        try:
            tag = standardize_version_tag(sys.argv[2])
        except:
            print "usage: fswms delete TAG"
            sys.exit(-1)
        if not tag_exists(tag):
            print "Error: The tag '%s' does not exist." % tag
            sys.exit(-1)
        system("git checkout master")
        system("git pull origin master")
        system(p.render("git tag -d {{{tag}}}", { 'tag' : tag }))
        system(p.render("git push origin :refs/tags/{{{tag}}}", { 'tag' : tag }))
        print "deleted %s " % (tag)
        sys.exit(-1)

    usage()
